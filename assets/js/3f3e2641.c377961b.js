"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7362],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=a,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4744:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const o={},i="Source files",l={unversionedId:"code_and_name_organization/source_files",id:"code_and_name_organization/source_files",title:"Source files",description:"\x3c!--",source:"@site/../docs/design/code_and_name_organization/source_files.md",sourceDirName:"code_and_name_organization",slug:"/code_and_name_organization/source_files",permalink:"/design/code_and_name_organization/source_files",draft:!1,editUrl:"https://github.com/carbon-language/carbon-lang/blob/trunk/docs/design/code_and_name_organization/source_files.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Code and name organization",permalink:"/design/code_and_name_organization/"},next:{title:"Control flow",permalink:"/design/control_flow/"}},s={},c=[{value:"Table of contents",id:"table-of-contents",level:2},{value:"Overview",id:"overview",level:2},{value:"Encoding",id:"encoding",level:2},{value:"Alternatives considered",id:"alternatives-considered",level:2},{value:"References",id:"references",level:2}],p={toc:c};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"source-files"},"Source files"),(0,a.kt)("h2",{id:"table-of-contents"},"Table of contents"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#overview"},"Overview")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#encoding"},"Encoding")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#alternatives-considered"},"Alternatives considered")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#references"},"References"))),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"A Carbon ",(0,a.kt)("em",{parentName:"p"},"source file"),' is a sequence of Unicode code points in Unicode\nNormalization Form C ("NFC"), and represents a portion of the complete text of a\nprogram.'),(0,a.kt)("p",null,'Program text can come from a variety of sources, such as an interactive\nprogramming environment (a so-called "Read-Evaluate-Print-Loop" or REPL), a\ndatabase, a memory buffer of an IDE, or a command-line argument.'),(0,a.kt)("p",null,"The canonical representation for Carbon programs is in files stored as a\nsequence of bytes in a file system on disk. Such files have a ",(0,a.kt)("inlineCode",{parentName:"p"},".carbon"),"\nextension."),(0,a.kt)("h2",{id:"encoding"},"Encoding"),(0,a.kt)("p",null,"The on-disk representation of a Carbon source file is encoded in UTF-8. Such\nfiles may begin with an optional UTF-8 BOM, that is, the byte sequence\nEF",(0,a.kt)("sub",null,"16"),",BB",(0,a.kt)("sub",null,"16"),",BF",(0,a.kt)("sub",null,"16"),". This prefix, if present, is\nignored."),(0,a.kt)("p",null,"No Unicode normalization is performed when reading an on-disk representation of\na Carbon source file, so the byte representation is required to be normalized in\nNormalization Form C. The Carbon source formatting tool will convert source\nfiles to NFC as necessary."),(0,a.kt)("h2",{id:"alternatives-considered"},"Alternatives considered"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0142.md#character-encoding-1"},"Character encoding")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0142.md#byte-order-marks"},"Byte order marks")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0142.md#normalization-forms"},"Normalization forms"))),(0,a.kt)("h2",{id:"references"},"References"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Proposal\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/carbon-language/carbon-lang/pull/142"},"#142: Unicode source files"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"https://www.unicode.org/versions/latest/"},"Unicode")," is a universal character\nencoding, maintained by the\n",(0,a.kt)("a",{parentName:"p",href:"https://home.unicode.org/basic-info/overview/"},"Unicode Consortium"),". It is\nthe canonical encoding used for textual information interchange across all\nmodern technology."),(0,a.kt)("p",{parentName:"li"},"Carbon is based on Unicode 13.0, which is currently the latest version of\nthe Unicode standard. Newer versions will be considered for adoption as they\nare released.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"https://www.unicode.org/reports/tr15/tr15-50.html"},"Unicode Standard Annex #15: Unicode Normalization Forms"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Unicode_equivalence#Normal_forms"},"Wikipedia Unicode equivalence page: Normal forms")))))}d.isMDXComponent=!0}}]);