"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1068],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(g,i(i({ref:t},p),{},{components:n})):a.createElement(g,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7606:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={},i="Carbon Language: <br/> An experimental successor to C++",l={unversionedId:"README",id:"README",title:"Carbon Language: <br/> An experimental successor to C++",description:"\x3c!--",source:"@site/../README.md",sourceDirName:".",slug:"/",permalink:"/",draft:!1,editUrl:"https://github.com/carbon-language/carbon-lang/blob/trunk/docs/../README.md",tags:[],version:"current",frontMatter:{}},s={},c=[{value:"Why build Carbon?",id:"why-build-carbon",level:2},{value:"Language Goals",id:"language-goals",level:2},{value:"Project status",id:"project-status",level:2},{value:"Carbon and C++",id:"carbon-and-c",level:2},{value:"Generics",id:"generics",level:2},{value:"Memory safety",id:"memory-safety",level:2},{value:"Getting started",id:"getting-started",level:2},{value:"Join us",id:"join-us",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"carbon-language--an-experimental-successor-to-c"},"Carbon Language: ",(0,r.kt)("br",null)," An experimental successor to C++"),(0,r.kt)("p",{align:"center"},(0,r.kt)("a",{href:"#why-build-carbon"},"Why?")," | ",(0,r.kt)("a",{href:"#language-goals"},"Goals")," | ",(0,r.kt)("a",{href:"#getting-started"},"Getting started")," | ",(0,r.kt)("a",{href:"#join-us"},"Join us")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"See our ",(0,r.kt)("a",{parentName:"strong",href:"https://youtu.be/omrY53kbVoA"},"announcement video")," from\n",(0,r.kt)("a",{parentName:"strong",href:"https://cppnorth.ca/"},"CppNorth"))),(0,r.kt)("a",{href:"docs/images/snippets.md#quicksort"},(0,r.kt)("img",{src:"docs/images/quicksort_snippet.svg",align:"right",width:"575",alt:"Quicksort code in Carbon. Follow the link to read more."})),(0,r.kt)("div",null,(0,r.kt)("a",{href:"#"},(0,r.kt)("img",{src:"docs/images/bumper.png"}))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Fast and works with C++")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Performance matching C++ using LLVM, with low-level access to bits and\naddresses"),(0,r.kt)("li",{parentName:"ul"},"Interoperate with your existing C++ code, from inheritance to templates"),(0,r.kt)("li",{parentName:"ul"},"Fast and scalable builds that work with your existing C++ build systems")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Modern and evolving")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Solid language foundations that are easy to learn, especially if you have\nused C++"),(0,r.kt)("li",{parentName:"ul"},"Easy, tool-based upgrades between Carbon versions"),(0,r.kt)("li",{parentName:"ul"},"Safer fundamentals, and an incremental path towards a memory-safe subset")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Welcoming open-source community")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Clear goals and priorities with robust governance"),(0,r.kt)("li",{parentName:"ul"},"Community that works to be welcoming, inclusive, and friendly"),(0,r.kt)("li",{parentName:"ul"},"Batteries-included approach: compiler, libraries, docs, tools, package\nmanager, and more")),(0,r.kt)("h2",{id:"why-build-carbon"},"Why build Carbon?"),(0,r.kt)("p",null,"C++ remains the dominant programming language for performance-critical software,\nwith massive and growing codebases and investments. However, it is struggling to\nimprove and meet developers' needs outlined above, in no small part due to\naccumulating decades of technical debt. Incrementally improving C++ is\n",(0,r.kt)("a",{parentName:"p",href:"/docs/project/difficulties_improving_cpp"},"extremely difficult"),", both due to\nthe technical debt itself and challenges with its evolution process. The best\nway to address these problems is to avoid inheriting the legacy of C or C++\ndirectly, and instead start with solid language foundations like a\n",(0,r.kt)("a",{parentName:"p",href:"#generics"},"modern generics system"),", modular code organization, and consistent,\nsimple syntax."),(0,r.kt)("p",null,"Existing modern languages already provide an excellent developer experience: Go,\nSwift, Kotlin, Rust, and many more. ",(0,r.kt)("strong",{parentName:"p"},"Developers that ",(0,r.kt)("em",{parentName:"strong"},"can")," use one of these\nexisting languages ",(0,r.kt)("em",{parentName:"strong"},"should"),".")," Unfortunately, the designs of these languages\npresent significant barriers to adoption and migration from C++. These barriers\nrange from changes in the idiomatic design of software to performance overhead."),(0,r.kt)("p",null,"Carbon is fundamentally ",(0,r.kt)("strong",{parentName:"p"},"a successor language approach"),", rather than an\nattempt to incrementally evolve C++. It is designed around interoperability with\nC++ as well as large-scale adoption and migration for existing C++ codebases and\ndevelopers. A successor language for C++ requires:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Performance matching C++"),", an essential property for our developers."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Seamless, bidirectional interoperability with C++"),", such that a library\nanywhere in an existing C++ stack can adopt Carbon without porting the rest."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"A gentle learning curve")," with reasonable familiarity for C++ developers."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Comparable expressivity")," and support for existing software's design and\narchitecture."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Scalable migration"),", with some level of source-to-source translation for\nidiomatic C++ code.")),(0,r.kt)("p",null,"With this approach, we can build on top of C++'s existing ecosystem, and bring\nalong existing investments, codebases, and developer populations. There are a\nfew languages that have followed this model for other ecosystems, and Carbon\naims to fill an analogous role for C++:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"JavaScript \u2192 TypeScript"),(0,r.kt)("li",{parentName:"ul"},"Java \u2192 Kotlin"),(0,r.kt)("li",{parentName:"ul"},"C++ \u2192 ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"Carbon")))),(0,r.kt)("h2",{id:"language-goals"},"Language Goals"),(0,r.kt)("p",null,"We are designing Carbon to support:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Performance-critical software"),(0,r.kt)("li",{parentName:"ul"},"Software and language evolution"),(0,r.kt)("li",{parentName:"ul"},"Code that is easy to read, understand, and write"),(0,r.kt)("li",{parentName:"ul"},"Practical safety and testing mechanisms"),(0,r.kt)("li",{parentName:"ul"},"Fast and scalable development"),(0,r.kt)("li",{parentName:"ul"},"Modern OS platforms, hardware architectures, and environments"),(0,r.kt)("li",{parentName:"ul"},"Interoperability with and migration from existing C++ code")),(0,r.kt)("p",null,"While many languages share subsets of these goals, what distinguishes Carbon is\ntheir combination."),(0,r.kt)("p",null,"We also have explicit ",(0,r.kt)("em",{parentName:"p"},"non-goals")," for Carbon, notably including:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A stable ABI for the entire language and library"),(0,r.kt)("li",{parentName:"ul"},"Perfect backwards or forwards compatibility")),(0,r.kt)("p",null,"Our detailed ",(0,r.kt)("a",{parentName:"p",href:"/docs/project/goals"},"goals")," document fleshes out these ideas\nand provides a deeper view into our goals for the Carbon project and language."),(0,r.kt)("h2",{id:"project-status"},"Project status"),(0,r.kt)("p",null,"Carbon is currently an experimental project. We want to better understand\nwhether we can build a language that meets our successor language criteria, and\nwhether the resulting language can gather a critical mass of interest within the\nlarger C++ industry and community."),(0,r.kt)("p",null,"Currently, we have fleshed out several core aspects of both Carbon the project\nand the language:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The strategy of the Carbon Language and project."),(0,r.kt)("li",{parentName:"ul"},"An open-source project structure, governance model, and evolution process."),(0,r.kt)("li",{parentName:"ul"},"Critical and foundational aspects of the language design informed by our\nexperience with C++ and the most difficult challenges we anticipate. This\nincludes designs for:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Generics"),(0,r.kt)("li",{parentName:"ul"},"Class types"),(0,r.kt)("li",{parentName:"ul"},"Inheritance"),(0,r.kt)("li",{parentName:"ul"},"Operator overloading"),(0,r.kt)("li",{parentName:"ul"},"Lexical and syntactic structure"),(0,r.kt)("li",{parentName:"ul"},"Code organization and modular structure"))),(0,r.kt)("li",{parentName:"ul"},"A prototype interpreter demo that can both run isolated examples and gives a\ndetailed analysis of the specific semantic model and abstract machine of\nCarbon. We call this the ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/explorer/"},"Carbon Explorer"),".")),(0,r.kt)("p",null,"We are currently focused on getting more broad feedback and participation from\nthe C++ community,\n",(0,r.kt)("a",{parentName:"p",href:"/docs/project/roadmap#completing-the-language-design"},"completing the 0.1 language design"),",\nand\n",(0,r.kt)("a",{parentName:"p",href:"/docs/project/roadmap#demo-implementation-of-core-features-with-working-examples"},"completing the Carbon Explorer implementation of this design"),".\nBeyond that, we plan to prioritize C++ interoperability and a realistic\ntoolchain that implements the 0.1 language and can be used to evaluate Carbon in\nmore detail."),(0,r.kt)("p",null,"You can see our ",(0,r.kt)("a",{parentName:"p",href:"/docs/project/roadmap"},"full roadmap")," for more details."),(0,r.kt)("h2",{id:"carbon-and-c"},"Carbon and C++"),(0,r.kt)("p",null,"If you're already a C++ developer, Carbon should have a gentle learning curve.\nIt is built out of a consistent set of language constructs that should feel\nfamiliar and be easy to read and understand."),(0,r.kt)("p",null,"C++ code like this:"),(0,r.kt)("a",{href:"docs/images/snippets.md#c"},(0,r.kt)("img",{src:"docs/images/cpp_snippet.svg",width:"600",alt:"A snippet of C++ code. Follow the link to read it."})),(0,r.kt)("p",null,"corresponds to this Carbon code:"),(0,r.kt)("a",{href:"docs/images/snippets.md#carbon"},(0,r.kt)("img",{src:"docs/images/carbon_snippet.svg",width:"600",alt:"A snippet of converted Carbon code. Follow the link to read it."})),(0,r.kt)("p",null,"You can call Carbon from C++ without overhead and the other way around. This\nmeans you migrate a single C++ library to Carbon within an application, or write\nnew Carbon on top of your existing C++ investment. For example:"),(0,r.kt)("a",{href:"docs/images/snippets.md#mixed"},(0,r.kt)("img",{src:"docs/images/mixed_snippet.svg",width:"600",alt:"A snippet of mixed Carbon and C++ code. Follow the link to read it."})),(0,r.kt)("p",null,"Read more about\n",(0,r.kt)("a",{parentName:"p",href:"/docs/design/interoperability/philosophy_and_goals"},"C++ interop in Carbon"),"."),(0,r.kt)("p",null,"Beyond interoperability between Carbon and C++, we're also planning to support\nmigration tools that will mechanically translate idiomatic C++ code into Carbon\ncode to help you switch an existing C++ codebase to Carbon."),(0,r.kt)("h2",{id:"generics"},"Generics"),(0,r.kt)("p",null,"Carbon provides a\n",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/docs/design/generics/overview#what-are-generics"},"modern generics system")),"\nwith checked definitions, while still ",(0,r.kt)("strong",{parentName:"p"},"supporting opt-in\n",(0,r.kt)("a",{parentName:"strong",href:"/docs/design/templates"},"templates")," for seamless C++ interop"),". Checked\ngenerics provide several advantages compared to C++ templates:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Generic definitions are fully type checked"),", removing the need to\ninstantiate to check for errors and giving greater confidence in code.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Avoids compile time cost of re-checking the definition for every\ninstantiation."),(0,r.kt)("li",{parentName:"ul"},"When using a definition-checked generic, usage error messages are\nclearer, directly showing which requirements are not met."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Enables automatic, opt-in type erasure and dynamic dispatch")," without a\nseparate implementation. This can reduce binary size and enables constructs\nlike heterogeneous containers."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Strong, checked interfaces")," mean fewer accidental dependencies on\nimplementation details and a clearer contract for consumers.")),(0,r.kt)("p",null,"Without sacrificing these advantages, ",(0,r.kt)("strong",{parentName:"p"},"Carbon generics support\nspecialization"),", ensuring it can fully address performance-critical use cases\nof C++ templates. For more details about Carbon's generics, see their\n",(0,r.kt)("a",{parentName:"p",href:"/docs/design/generics"},"design"),"."),(0,r.kt)("p",null,"In addition to easy and powerful interop with C++, Carbon templates can be\nconstrained and incrementally migrated to checked generics at a fine granularity\nand with a smooth evolutionary path."),(0,r.kt)("h2",{id:"memory-safety"},"Memory safety"),(0,r.kt)("p",null,"Safety, and especially\n",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Memory_safety"},"memory safety"),", remain key\nchallenges for C++ and something a successor language needs to address. Our\ninitial priority and focus is on immediately addressing important, low-hanging\nfruit in the safety space:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Tracking uninitialized states better, increased enforcement of\ninitialization, and systematically providing hardening against\ninitialization bugs when desired."),(0,r.kt)("li",{parentName:"ul"},"Designing fundamental APIs and idioms to support dynamic bounds checks in\ndebug and hardened builds."),(0,r.kt)("li",{parentName:"ul"},"Having a default debug build mode that is both cheaper and more\ncomprehensive than existing C++ build modes even when combined with\n",(0,r.kt)("a",{parentName:"li",href:"https://github.com/google/sanitizers/wiki/AddressSanitizer"},"Address Sanitizer"),".")),(0,r.kt)("p",null,"Once we can migrate code into Carbon, we will have a simplified language with\nroom in the design space to add any necessary annotations or features, and\ninfrastructure like ",(0,r.kt)("a",{parentName:"p",href:"#generics"},"generics")," to support safer design patterns.\nLonger term, we will build on this to introduce ",(0,r.kt)("strong",{parentName:"p"},"a safe Carbon subset"),". This\nwill be a large and complex undertaking, and won't be in the 0.1 design.\nMeanwhile, we are closely watching and learning from efforts to add memory safe\nsemantics onto C++ such as Rust-inspired\n",(0,r.kt)("a",{parentName:"p",href:"https://discourse.llvm.org/t/rfc-lifetime-annotations-for-c/61377"},"lifetime annotations"),"."),(0,r.kt)("h2",{id:"getting-started"},"Getting started"),(0,r.kt)("p",null,"You can get started playing with Carbon by checking out the codebase and using\nthe Carbon explorer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# Install bazelisk using Homebrew.\n$ brew install bazelisk\n\n# Install Clang/LLVM using Homebrew.\n# Many Clang/LLVM releases aren't built with options we rely on.\n$ brew install llvm\n$ export PATH=\"$(brew --prefix llvm)/bin:${PATH}\"\n\n# Download Carbon's code.\n$ git clone https://github.com/carbon-language/carbon-lang\n$ cd carbon-lang\n\n# Build and run the explorer.\n$ bazel run //explorer -- ./explorer/testdata/print/format_only.carbon\n")),(0,r.kt)("p",null,"These instructions assume ",(0,r.kt)("a",{parentName:"p",href:"https://brew.sh/"},"Homebrew"),"; see our\n",(0,r.kt)("a",{parentName:"p",href:"/docs/project/contribution_tools"},"contribution tools documentation")," for more\nextensive tooling instructions."),(0,r.kt)("p",null,"Learn more about the Carbon project:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/project/goals"},"Project goals")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/design"},"Language design overview")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/explorer"},"Carbon Explorer")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/project/faq"},"FAQ"))),(0,r.kt)("h2",{id:"join-us"},"Join us"),(0,r.kt)("p",null,"Carbon is committed to a welcoming and inclusive environment where everyone can\ncontribute."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To watch for major release announcements, subscribe to\n",(0,r.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/discussions/1020"},"our Carbon release post on GitHub"),"\nand ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang"},"star carbon-lang"),"."),(0,r.kt)("li",{parentName:"ul"},"To join the design discussion, join our\n",(0,r.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/discussions"},"our GitHub forum"),"."),(0,r.kt)("li",{parentName:"ul"},"See our ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/CODE_OF_CONDUCT.md"},"code of conduct")," and\n",(0,r.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/CONTRIBUTING.md"},"contributing guidelines")," for information about the Carbon\ndevelopment community."),(0,r.kt)("li",{parentName:"ul"},"We discuss Carbon on ",(0,r.kt)("a",{parentName:"li",href:"https://discord.gg/ZjVdShJDAs"},"Discord"),".")))}u.isMDXComponent=!0}}]);