"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9409],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=p(n),u=i,f=d["".concat(s,".").concat(u)]||d[u]||c[u]||r;return n?a.createElement(f,l(l({ref:t},m),{},{components:n})):a.createElement(f,l({ref:t},m))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8461:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={},l="Generics: Overview",o={unversionedId:"docs/design/generics/overview",id:"docs/design/generics/overview",title:"Generics: Overview",description:"\x3c!--",source:"@site/../docs/design/generics/overview.md",sourceDirName:"docs/design/generics",slug:"/docs/design/generics/overview",permalink:"/docs/design/generics/overview",draft:!1,editUrl:"https://github.com/carbon-language/carbon-lang/blob/trunk/docs/../docs/design/generics/overview.md",tags:[],version:"current",frontMatter:{},sidebar:"design",previous:{title:"Generics: Goals",permalink:"/docs/design/generics/goals"},next:{title:"Generics: Terminology",permalink:"/docs/design/generics/terminology"}},s={},p=[{value:"Table of contents",id:"table-of-contents",level:2},{value:"Goals",id:"goals",level:2},{value:"Summary",id:"summary",level:2},{value:"What are generics?",id:"what-are-generics",level:2},{value:"Interfaces",id:"interfaces",level:3},{value:"Defining interfaces",id:"defining-interfaces",level:4},{value:"Contrast with templates",id:"contrast-with-templates",level:4},{value:"Implementing interfaces",id:"implementing-interfaces",level:3},{value:"Accessing members of interfaces",id:"accessing-members-of-interfaces",level:4},{value:"Type-of-types",id:"type-of-types",level:3},{value:"Generic functions",id:"generic-functions",level:3},{value:"Deduced parameters",id:"deduced-parameters",level:4},{value:"Generic type parameters",id:"generic-type-parameters",level:4},{value:"Requiring or extending another interface",id:"requiring-or-extending-another-interface",level:3},{value:"Combining interfaces",id:"combining-interfaces",level:3},{value:"Named constraints",id:"named-constraints",level:4},{value:"Type erasure",id:"type-erasure",level:4},{value:"Adapting types",id:"adapting-types",level:3},{value:"Interface input and output types",id:"interface-input-and-output-types",level:3},{value:"Associated types",id:"associated-types",level:4},{value:"Parameterized interfaces",id:"parameterized-interfaces",level:4},{value:"Constraints",id:"constraints",level:3},{value:"Parameterized impls",id:"parameterized-impls",level:3},{value:"Operator overloading",id:"operator-overloading",level:3},{value:"Future work",id:"future-work",level:2},{value:"References",id:"references",level:2}],m={toc:p};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"generics-overview"},"Generics: Overview"),(0,i.kt)("p",null,"This document is a high-level description of Carbon's generics design, with\npointers to other design documents that dive deeper into individual topics."),(0,i.kt)("h2",{id:"table-of-contents"},"Table of contents"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#goals"},"Goals")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#summary"},"Summary")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#what-are-generics"},"What are generics?"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#interfaces"},"Interfaces"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#defining-interfaces"},"Defining interfaces")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#contrast-with-templates"},"Contrast with templates")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#implementing-interfaces"},"Implementing interfaces"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#accessing-members-of-interfaces"},"Accessing members of interfaces")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#type-of-types"},"Type-of-types")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#generic-functions"},"Generic functions"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#deduced-parameters"},"Deduced parameters")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#generic-type-parameters"},"Generic type parameters")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#requiring-or-extending-another-interface"},"Requiring or extending another interface")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#combining-interfaces"},"Combining interfaces"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#named-constraints"},"Named constraints")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#type-erasure"},"Type erasure")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#adapting-types"},"Adapting types")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#interface-input-and-output-types"},"Interface input and output types"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#associated-types"},"Associated types")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#parameterized-interfaces"},"Parameterized interfaces")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#constraints"},"Constraints")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#parameterized-impls"},"Parameterized impls")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#operator-overloading"},"Operator overloading")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#future-work"},"Future work")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#references"},"References"))),(0,i.kt)("h2",{id:"goals"},"Goals"),(0,i.kt)("p",null,"The goal of Carbon generics is to provide an alternative to Carbon (or C++)\ntemplates. Generics in this form should provide many advantages, including:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Function calls and bodies are checked independently against the function\nsignatures."),(0,i.kt)("li",{parentName:"ul"},"Clearer and earlier error messages."),(0,i.kt)("li",{parentName:"ul"},"Fast builds, particularly development builds."),(0,i.kt)("li",{parentName:"ul"},"Support for both static and dynamic dispatch.")),(0,i.kt)("p",null,"For more detail, see ",(0,i.kt)("a",{parentName:"p",href:"/docs/design/generics/goals"},"the detailed discussion of generics goals")," and\n",(0,i.kt)("a",{parentName:"p",href:"/docs/design/generics/terminology"},"generics terminology"),"."),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Summary of how Carbon generics work:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Generics")," are parameterized functions and types that can apply generally.\nThey are used to avoid writing specialized, near-duplicate code for similar\nsituations."),(0,i.kt)("li",{parentName:"ul"},"Generics are written using ",(0,i.kt)("em",{parentName:"li"},"interfaces")," which have a name and describe\nmethods, functions, and other entities for types to implement."),(0,i.kt)("li",{parentName:"ul"},"Types must explicitly ",(0,i.kt)("em",{parentName:"li"},"implement")," interfaces to indicate that they support\nits functionality. A given type may implement an interface at most once."),(0,i.kt)("li",{parentName:"ul"},"Implementations may be part of the type's definition, in which case you can\ndirectly call the interface's methods on those types. Or, they may be\nexternal, in which case the implementation is allowed to be defined in the\nlibrary defining the interface."),(0,i.kt)("li",{parentName:"ul"},"Interfaces are used as the type of a generic type parameter, acting as a\n",(0,i.kt)("em",{parentName:"li"},"type-of-type"),". Type-of-types in general specify the capabilities and\nrequirements of the type. Types define specific implementations of those\ncapabilities. Inside such a generic function, the API of the type is\n",(0,i.kt)("a",{parentName:"li",href:"/docs/design/generics/terminology#type-erasure"},"erased"),", except for the names defined in the\ntype-of-type."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Deduced parameters")," are parameters whose values are determined by the\nvalues and (most commonly) the types of the explicit arguments. Generic type\nparameters are typically deduced."),(0,i.kt)("li",{parentName:"ul"},"A function with a generic type parameter can have the same function body as\nan unparameterized one. Functions can freely mix generic, template, and\nregular parameters."),(0,i.kt)("li",{parentName:"ul"},"Interfaces can require other interfaces be implemented."),(0,i.kt)("li",{parentName:"ul"},"Interfaces can ",(0,i.kt)("a",{parentName:"li",href:"/docs/design/generics/terminology#extending-an-interface"},"extend")," required\ninterfaces."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"&")," operation on type-of-types allows you conveniently combine\ninterfaces. It gives you all the names that don't conflict."),(0,i.kt)("li",{parentName:"ul"},"You may also declare a new type-of-type directly using\n",(0,i.kt)("a",{parentName:"li",href:"/docs/design/generics/terminology#named-constraints"},'"named constraints"'),". Named constraints\ncan express requirements that multiple interfaces be implemented, and give\nyou control over how name conflicts are handled."),(0,i.kt)("li",{parentName:"ul"},"Alternatively, you may resolve name conflicts by using a qualified member\naccess expression to directly call a function from a specific interface\nusing a qualified name.")),(0,i.kt)("h2",{id:"what-are-generics"},"What are generics?"),(0,i.kt)("p",null,"Generics are a mechanism for writing parameterized code that applies generally\ninstead of making near-duplicates for very similar situations, much like C++\ntemplates. For example, instead of having one function per type-you-can-sort:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"fn SortInt32Vector(a: Vector(i32)*) { ... }\nfn SortStringVector(a: Vector(String)*) { ... }\n...\n")),(0,i.kt)("p",null,"You might have one generic function that could sort any array with comparable\nelements:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"fn SortVector(T:! Comparable, a: Vector(T)*) { ... }\n")),(0,i.kt)("p",null,"The syntax above adds a ",(0,i.kt)("inlineCode",{parentName:"p"},"!")," to indicate that the parameter named ",(0,i.kt)("inlineCode",{parentName:"p"},"T")," is generic\nand the caller will have to provide a value known at compile time."),(0,i.kt)("p",null,"Given an ",(0,i.kt)("inlineCode",{parentName:"p"},"i32")," vector ",(0,i.kt)("inlineCode",{parentName:"p"},"iv"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"SortVector(i32, &iv)")," is equivalent to\n",(0,i.kt)("inlineCode",{parentName:"p"},"SortInt32Vector(&iv)"),". Similarly for a ",(0,i.kt)("inlineCode",{parentName:"p"},"String")," vector ",(0,i.kt)("inlineCode",{parentName:"p"},"sv"),",\n",(0,i.kt)("inlineCode",{parentName:"p"},"SortVector(String, &sv)")," is equivalent to ",(0,i.kt)("inlineCode",{parentName:"p"},"SortStringVector(&sv)"),". Thus, we can\nsort any vector containing comparable elements using this single ",(0,i.kt)("inlineCode",{parentName:"p"},"SortVector"),"\nfunction."),(0,i.kt)("p",null,"This ability to generalize makes ",(0,i.kt)("inlineCode",{parentName:"p"},"SortVector")," a ",(0,i.kt)("em",{parentName:"p"},"generic"),"."),(0,i.kt)("h3",{id:"interfaces"},"Interfaces"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"SortVector")," function requires a definition of ",(0,i.kt)("inlineCode",{parentName:"p"},"Comparable"),", with the goal\nthat the compiler can:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"completely type check a generic definition without information from where\nit's called."),(0,i.kt)("li",{parentName:"ul"},"completely type check a call to a generic with information only from the\nfunction's signature, and not from its body.")),(0,i.kt)("p",null,"In this example, then, ",(0,i.kt)("inlineCode",{parentName:"p"},"Comparable")," is an ",(0,i.kt)("em",{parentName:"p"},"interface"),"."),(0,i.kt)("p",null,"Interfaces describe all the requirements needed for the type ",(0,i.kt)("inlineCode",{parentName:"p"},"T"),". Given that the\ncompiler knows ",(0,i.kt)("inlineCode",{parentName:"p"},"T")," satisfies those requirements, it can type check the body of\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"SortVector")," function. This includes checking that the ",(0,i.kt)("inlineCode",{parentName:"p"},"Comparable"),"\nrequirement covers all of the uses of ",(0,i.kt)("inlineCode",{parentName:"p"},"T")," inside the function."),(0,i.kt)("p",null,"Later, when the compiler comes across a call to ",(0,i.kt)("inlineCode",{parentName:"p"},"SortVector"),", it can type check\nagainst the requirements expressed in the function's signature. Using only the\ntypes at the call site, the compiler can check that the member elements of the\npassed-in array satisfy the function's requirements. There is no need to look at\nthe body of the ",(0,i.kt)("inlineCode",{parentName:"p"},"SortVector")," function, since we separately checked that those\nrequirements were sufficient."),(0,i.kt)("h4",{id:"defining-interfaces"},"Defining interfaces"),(0,i.kt)("p",null,"Interfaces, then, have a name and describe methods, functions, and other\nentities for types to implement."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"interface Comparable {\n  // `Less` is an associated method.\n  fn Less[me: Self](rhs: Self) -> Bool;\n}\n")),(0,i.kt)("p",null,"Functions and methods may be given a default implementation by prefixing the\ndeclaration with ",(0,i.kt)("inlineCode",{parentName:"p"},"default")," and putting the function body in curly braces\n",(0,i.kt)("inlineCode",{parentName:"p"},"{"),"...",(0,i.kt)("inlineCode",{parentName:"p"},"}")," in place of the terminating ",(0,i.kt)("inlineCode",{parentName:"p"},";")," of the function declaration. To\nprevent that implementation from being overridden, use ",(0,i.kt)("inlineCode",{parentName:"p"},"final")," instead of\n",(0,i.kt)("inlineCode",{parentName:"p"},"default"),"."),(0,i.kt)("p",null,"Interfaces describe functionality, but not data; no variables may be declared in\nan interface."),(0,i.kt)("h4",{id:"contrast-with-templates"},"Contrast with templates"),(0,i.kt)("p",null,"Contrast these generics with a C++ template, where the compiler may be able to\ndo some checking given a function definition, but more checking of the\ndefinition is required after seeing the call sites once all the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/design/generics/terminology#instantiation"},"instantiations")," are known."),(0,i.kt)("p",null,"Note: ",(0,i.kt)("a",{parentName:"p",href:"/docs/design/generics/terminology"},"Generics terminology")," goes into more detail about the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/design/generics/terminology#generic-versus-template-parameters"},"differences between generics and templates"),"."),(0,i.kt)("h3",{id:"implementing-interfaces"},"Implementing interfaces"),(0,i.kt)("p",null,"Interfaces themselves only describe functionality by way of method descriptions.\nA type needs to ",(0,i.kt)("em",{parentName:"p"},"implement")," an interface to indicate that it supports its\nfunctionality. A given type may implement an interface at most once."),(0,i.kt)("p",null,"Consider this interface:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"interface Printable {\n  fn Print[me: Self]();\n}\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"interface")," keyword is used to define a\n",(0,i.kt)("a",{parentName:"p",href:"/docs/design/generics/terminology#nominal-interfaces"},(0,i.kt)("em",{parentName:"a"},"nominal interface")),". That means that types\nneed to explicitly implement them, using an ",(0,i.kt)("inlineCode",{parentName:"p"},"impl")," block, such as here:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"class Song {\n  // ...\n\n  // Implementing `Printable` for `Song` inside the definition of `Song`\n  // without the keyword `external` means all names of `Printable`, such\n  // as `F`, are included as a part of the `Song` API.\n  impl as Printable {\n    // Could use `Self` in place of `Song` here.\n    fn Print[me: Song]() { ... }\n  }\n}\n\n// Implement `Comparable` for `Song` without changing the API of `Song`\n// using an `external impl` declaration. This may be defined in either\n// the library defining `Song` or `Comparable`.\nexternal impl Song as Comparable {\n  // Could use either `Self` or `Song` here.\n  fn Less[me: Self](rhs: Self) -> Bool { ... }\n}\n")),(0,i.kt)("p",null,"Implementations may be defined within the class definition itself or\nout-of-line. Implementations may optionally be start with the ",(0,i.kt)("inlineCode",{parentName:"p"},"external")," keyword\nto say the members of the interface are not members of the class. Out-of-line\nimplementations must be external. External implementations may be defined in the\nlibrary defining either the class or the interface."),(0,i.kt)("h4",{id:"accessing-members-of-interfaces"},"Accessing members of interfaces"),(0,i.kt)("p",null,"The methods of an interface implemented internally within the class definition\nmay be called with the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/design/generics/terminology#simple-member-access"},"simple member access syntax"),". Methods of\nall implemented interfaces may be called with a\n",(0,i.kt)("a",{parentName:"p",href:"/docs/design/generics/terminology#qualified-member-access-expression"},"qualified member access expression"),",\nwhether they are defined internally or externally."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"var song: Song;\n// `song.Print()` is allowed, unlike `song.Play()`.\nsong.Print();\n// `Less` is defined in `Comparable`, which is\n// implemented externally for `Song`\nsong.(Comparable.Less)(song);\n// Can also call `Print` using a qualified member\n// access expression, using the compound member access\n// syntax with the qualified name `Printable.Print`:\nsong.(Printable.Print)();\n")),(0,i.kt)("h3",{id:"type-of-types"},"Type-of-types"),(0,i.kt)("p",null,"To type check a function, the compiler needs to be able to verify that uses of a\nvalue match the capabilities of the value's type. In ",(0,i.kt)("inlineCode",{parentName:"p"},"SortVector"),", the parameter\n",(0,i.kt)("inlineCode",{parentName:"p"},"T")," is a type, but that type is a generic parameter. That means that the\nspecific type value assigned to ",(0,i.kt)("inlineCode",{parentName:"p"},"T")," is not known when type checking the\n",(0,i.kt)("inlineCode",{parentName:"p"},"SortVector")," function. Instead it is the constraints on ",(0,i.kt)("inlineCode",{parentName:"p"},"T")," that let the\ncompiler know what operations may be performed on values of type ",(0,i.kt)("inlineCode",{parentName:"p"},"T"),". Those\nconstraints are represented by the type of ",(0,i.kt)("inlineCode",{parentName:"p"},"T"),", a\n",(0,i.kt)("a",{parentName:"p",href:"/docs/design/generics/terminology#type-of-type"},(0,i.kt)("strong",{parentName:"a"},(0,i.kt)("em",{parentName:"strong"},"type-of-type"))),"."),(0,i.kt)("p",null,"In general, a type-of-type describes the capabilities of a type, while a type\ndefines specific implementations of those capabilities. An interface, like\n",(0,i.kt)("inlineCode",{parentName:"p"},"Comparable"),", may be used as a type-of-type. In that case, the constraint on the\ntype is that it must implement the interface ",(0,i.kt)("inlineCode",{parentName:"p"},"Comparable"),"."),(0,i.kt)("p",null,"A type-of-type also defines a set of names and a mapping to corresponding\nqualified names. Those names are used for\n",(0,i.kt)("a",{parentName:"p",href:"/docs/design/generics/terminology#simple-member-access"},"simple member lookup")," in scopes where the\nvalue of the type is not known, such as when the type is a generic parameter."),(0,i.kt)("p",null,"You may combine interfaces into new type-of-types using\n",(0,i.kt)("a",{parentName:"p",href:"#combining-interfaces"},"the ",(0,i.kt)("inlineCode",{parentName:"a"},"&")," operator")," or\n",(0,i.kt)("a",{parentName:"p",href:"#named-constraints"},"named constraints"),"."),(0,i.kt)("h3",{id:"generic-functions"},"Generic functions"),(0,i.kt)("p",null,"We want to be able to call generic functions just like ordinary functions, and\nwrite generic function bodies like ordinary functions. There are only a few\ndifferences, like that you can't take the address of generic functions."),(0,i.kt)("h4",{id:"deduced-parameters"},"Deduced parameters"),(0,i.kt)("p",null,"This ",(0,i.kt)("inlineCode",{parentName:"p"},"SortVector")," function is explicitly providing type information that is\nalready included in the type of the second argument. To eliminate the argument\nat the call site, use a ",(0,i.kt)("em",{parentName:"p"},"deduced parameter"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"fn SortVectorDeduced[T:! Comparable](a: Vector(T)*) { ... }\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"T")," parameter is defined in square brackets before the explicit parameter\nlist in parenthesis to indicate it should be deduced. This means you may call\nthe function without the type argument, just like the ordinary functions\n",(0,i.kt)("inlineCode",{parentName:"p"},"SortInt32Vector")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"SortStringVector"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"SortVectorDeduced(&anIntVector);\n// or\nSortVectorDeduced(&aStringVector);\n")),(0,i.kt)("p",null,"and the compiler deduces that the ",(0,i.kt)("inlineCode",{parentName:"p"},"T")," argument should be set to ",(0,i.kt)("inlineCode",{parentName:"p"},"i32")," or\n",(0,i.kt)("inlineCode",{parentName:"p"},"String")," from the type of the argument."),(0,i.kt)("p",null,"Deduced arguments are always determined from the call and its explicit\narguments. There is no syntax for specifying deduced arguments directly at the\ncall site."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"// ERROR: can't determine `U` from explicit parameters\nfn Illegal[T:! Type, U:! Type](x: T) -> U { ... }\n")),(0,i.kt)("h4",{id:"generic-type-parameters"},"Generic type parameters"),(0,i.kt)("p",null,"A function with a generic type parameter can have the same function body as an\nunparameterized one."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"fn PrintIt[T:! Printable](p: T*) {\n  p->Print();\n}\n\nfn PrintIt(p: Song*) {\n  p->Print();\n}\n")),(0,i.kt)("p",null,"Inside the function body, you can treat the generic type parameter just like any\nother type. There is no need to refer to or access generic parameters\ndifferently because they are defined as generic, as long as you only refer to\nthe names defined by ",(0,i.kt)("a",{parentName:"p",href:"#type-of-types"},"type-of-type")," for the type parameter."),(0,i.kt)("p",null,"You may also refer to any of the methods of interfaces required by the\ntype-of-type using a\n",(0,i.kt)("a",{parentName:"p",href:"#accessing-members-of-interfaces"},"qualified member access expression"),", as shown\nin the following sections."),(0,i.kt)("p",null,"A function can have a mix of generic, template, and regular parameters.\nLikewise, it's allowed to pass a template or generic value to a generic or\nregular parameter. ",(0,i.kt)("em",{parentName:"p"},"However, passing a generic value to a template parameter is\nfuture work.")),(0,i.kt)("h3",{id:"requiring-or-extending-another-interface"},"Requiring or extending another interface"),(0,i.kt)("p",null,"Interfaces can require other interfaces be implemented:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"interface Equatable {\n  fn IsEqual[me: Self](rhs: Self) -> Bool;\n}\n\n// `Iterable` requires that `Equatable` is implemented.\ninterface Iterable {\n  impl as Equatable;\n  fn Advance[addr me: Self*]();\n}\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"extends")," keyword is used to ",(0,i.kt)("a",{parentName:"p",href:"/docs/design/generics/terminology#extending-an-interface"},"extend"),"\nanother interface. If interface ",(0,i.kt)("inlineCode",{parentName:"p"},"Derived")," extends interface ",(0,i.kt)("inlineCode",{parentName:"p"},"Base"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Base"),"'s\ninterface is both required and all its methods are included in ",(0,i.kt)("inlineCode",{parentName:"p"},"Derived"),"'s\ninterface."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"// `Hashable` extends `Equatable`.\ninterface Hashable {\n  extends Equatable;\n  fn Hash[me: Self]() -> u64;\n}\n// `Hashable` is equivalent to:\ninterface Hashable {\n  impl as Equatable;\n  alias IsEqual = Equatable.IsEqual;\n  fn Hash[me: Self]() -> u64;\n}\n")),(0,i.kt)("p",null,"A type may implement the base interface implicitly by implementing all the\nmethods in the implementation of the derived interface."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"class Key {\n  // ...\n  impl as Hashable {\n    fn IsEqual[me: Key](rhs: Key) -> Bool { ... }\n    fn Hash[me: Key]() -> u64 { ... }\n  }\n  // No need to separately implement `Equatable`.\n}\nvar k: Key = ...;\nk.Hash();\nk.IsEqual(k);\n")),(0,i.kt)("h3",{id:"combining-interfaces"},"Combining interfaces"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"&")," operation on type-of-types allows you conveniently combine interfaces.\nIt gives you all the names that don't conflict."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"interface Renderable {\n  fn GetCenter[me: Self]() -> (i32, i32);\n  // Draw the object to the screen\n  fn Draw[me: Self]();\n}\ninterface EndOfGame {\n  fn SetWinner[addr me: Self*](player: i32);\n  // Indicate the game was a draw\n  fn Draw[addr me: Self*]();\n}\n\nfn F[T:! Renderable & EndOfGame](game_state: T*) -> (i32, i32) {\n  game_state->SetWinner(1);\n  return game_state->Center();\n}\n")),(0,i.kt)("p",null,"Names with conflicts can be accessed using a\n",(0,i.kt)("a",{parentName:"p",href:"#accessing-members-of-interfaces"},"qualified member access expression"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"fn BothDraws[T:! Renderable & EndOfGame](game_state: T*) {\n  game_state->(Renderable.Draw)();\n  game_state->(GameState.Draw)();\n}\n")),(0,i.kt)("h4",{id:"named-constraints"},"Named constraints"),(0,i.kt)("p",null,"You may also declare a new type-of-type directly using\n",(0,i.kt)("a",{parentName:"p",href:"/docs/design/generics/terminology#named-constraints"},'"named constraints"'),". Named constraints can\nexpress requirements that multiple interfaces be implemented, and give you\ncontrol over how name conflicts are handled. Named constraints have other\napplications and capabilities not covered here."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"constraint Combined {\n  impl as Renderable;\n  impl as EndOfGame;\n  alias Draw_Renderable = Renderable.Draw;\n  alias Draw_EndOfGame = EndOfGame.Draw;\n  alias SetWinner = EndOfGame.SetWinner;\n}\n\nfn CallItAll[T:! Combined](game_state: T*, int winner) {\n  if (winner > 0) {\n    game_state->SetWinner(winner);\n  } else {\n    game_state->Draw_EndOfGame();\n  }\n  game_state->Draw_Renderable();\n  // Can still use a qualified member access expression\n  // for names not defined in the named constraint.\n  return game_state->(Renderable.Center)();\n}\n")),(0,i.kt)("h4",{id:"type-erasure"},"Type erasure"),(0,i.kt)("p",null,"Inside a generic function, the API of a type argument is\n",(0,i.kt)("a",{parentName:"p",href:"/docs/design/generics/terminology#type-erasure"},"erased")," except for the names defined in the\ntype-of-type. An equivalent model is to say an\n",(0,i.kt)("a",{parentName:"p",href:"/docs/design/generics/terminology#archetype"},"archetype")," is used for type checking and name lookup\nwhen the actual type is not known in that scope. The archetype has members\ndictated by the type-of-type."),(0,i.kt)("p",null,"For example: If there were a class ",(0,i.kt)("inlineCode",{parentName:"p"},"CDCover")," defined this way:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"class CDCover  {\n  impl as Printable {\n    ...\n  }\n}\n")),(0,i.kt)("p",null,"it can be passed to this ",(0,i.kt)("inlineCode",{parentName:"p"},"PrintIt")," function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"fn PrintIt[T:! Printable](p: T*) {\n  p->Print();\n}\n")),(0,i.kt)("p",null,"Inside ",(0,i.kt)("inlineCode",{parentName:"p"},"PrintIt"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"T")," is an archetype with the API of ",(0,i.kt)("inlineCode",{parentName:"p"},"Printable"),". A call to\n",(0,i.kt)("inlineCode",{parentName:"p"},"PrintIt")," with a value of type ",(0,i.kt)("inlineCode",{parentName:"p"},"CDCover")," erases everything except the members or\n",(0,i.kt)("inlineCode",{parentName:"p"},"Printable"),". This includes the type connection to ",(0,i.kt)("inlineCode",{parentName:"p"},"CDCover"),", so it is illegal to\ncast from ",(0,i.kt)("inlineCode",{parentName:"p"},"T")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"CDCover"),"."),(0,i.kt)("h3",{id:"adapting-types"},"Adapting types"),(0,i.kt)("p",null,"Carbon has a mechanism called ",(0,i.kt)("a",{parentName:"p",href:"/docs/design/generics/terminology#adapting-a-type"},"adapting types"),")\nto create new types that are ",(0,i.kt)("a",{parentName:"p",href:"/docs/design/generics/terminology#compatible-types"},"compatible")," with\nexisting types but with different interface implementations. This could be used\nto add or replace implementations, or define implementations for reuse."),(0,i.kt)("p",null,"In this example, we have multiple ways of sorting a collection of ",(0,i.kt)("inlineCode",{parentName:"p"},"Song")," values."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"class Song { ... }\n\nadapter SongByArtist extends Song {\n  impl as Comparable { ... }\n}\n\nadapter SongByTitle extends Song {\n  impl as Comparable { ... }\n}\n")),(0,i.kt)("p",null,"Values of type ",(0,i.kt)("inlineCode",{parentName:"p"},"Song")," may be cast to ",(0,i.kt)("inlineCode",{parentName:"p"},"SongByArtist")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"SongByTitle")," to get a\nspecific sort order."),(0,i.kt)("h3",{id:"interface-input-and-output-types"},"Interface input and output types"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/design/generics/terminology#interface-type-parameters-and-associated-types"},"Associated types and interface parameters"),'\nallow function signatures to vary with the implementing type. The biggest\ndifference between these is that associated types ("output types") may be\ndeduced from a type, and types can implement the same interface multiple times\nwith different interface parameters ("input types").'),(0,i.kt)("h4",{id:"associated-types"},"Associated types"),(0,i.kt)("p",null,"Expect types that vary in an interface to be associated types by default. Since\nassociated types may be deduced, they are more convenient to use. Imagine a\n",(0,i.kt)("inlineCode",{parentName:"p"},"Stack")," interface. Different types implementing ",(0,i.kt)("inlineCode",{parentName:"p"},"Stack")," will have different\nelement types:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"interface Stack {\n  let ElementType:! Movable;\n  fn Push[addr me: Self*](value: ElementType);\n  fn Pop[addr me: Self*]() -> ElementType;\n  fn IsEmpty[addr me: Self*]() -> Bool;\n}\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ElementType")," is an associated type of the interface ",(0,i.kt)("inlineCode",{parentName:"p"},"Stack"),". Types that\nimplement ",(0,i.kt)("inlineCode",{parentName:"p"},"Stack")," give ",(0,i.kt)("inlineCode",{parentName:"p"},"ElementType")," a specific value of some type implementing\n",(0,i.kt)("inlineCode",{parentName:"p"},"Movable"),". Functions that accept a type implementing ",(0,i.kt)("inlineCode",{parentName:"p"},"Stack")," can deduce the\n",(0,i.kt)("inlineCode",{parentName:"p"},"ElementType")," from the stack type."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"// \u2705 This is allowed, since the type of the stack will determine\n// `ElementType`.\nfn PeekAtTopOfStack[StackType:! Stack](s: StackType*)\n    -> StackType.ElementType;\n")),(0,i.kt)("h4",{id:"parameterized-interfaces"},"Parameterized interfaces"),(0,i.kt)("p",null,"Parameterized interfaces are commonly associated with overloaded operators.\nImagine an interface for determining if two values are equivalent that allows\nthose types to be different. An element in a hash map might have type\n",(0,i.kt)("inlineCode",{parentName:"p"},"Pair(String, i64)")," that implements both ",(0,i.kt)("inlineCode",{parentName:"p"},"Equatable(String)")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"Equatable(Pair(String, i64))"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"interface Equatable(T:! Type) {\n  fn IsEqual[me: Self](compare_to: T) -> Bool;\n}\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"T")," is a parameter to interface ",(0,i.kt)("inlineCode",{parentName:"p"},"Equatable"),". A type can implement ",(0,i.kt)("inlineCode",{parentName:"p"},"Equatable"),"\nmultiple times as long as each time it is with a different value of the ",(0,i.kt)("inlineCode",{parentName:"p"},"T"),"\nparameter. Functions may accept types implementing ",(0,i.kt)("inlineCode",{parentName:"p"},"Equatable(i32)")," or\n",(0,i.kt)("inlineCode",{parentName:"p"},"Equatable(f32)"),". Functions can't accept types implementing ",(0,i.kt)("inlineCode",{parentName:"p"},"Equatable(T)")," in\ngeneral, unless some other parameter determines ",(0,i.kt)("inlineCode",{parentName:"p"},"T"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"// \u2705 This is allowed, since the value of `T` is determined by the\n// `v` parameter.\nfn FindInVector[T:! Type, U:! Equatable(T)](v: Vector(T), needle: U)\n    -> Optional(i32);\n\n// \u274c This is forbidden. Since `U` could implement `Equatable`\n// multiple times, there is no way to determine the value for `T`.\n// Contrast with `PeekAtTopOfStack` in the associated type example.\nfn CompileError[T:! Type, U:! Equatable(T)](x: U) -> T;\n")),(0,i.kt)("h3",{id:"constraints"},"Constraints"),(0,i.kt)("p",null,"Type-of-types can be further constrained using a ",(0,i.kt)("inlineCode",{parentName:"p"},"where")," clause:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"fn FindFirstPrime[T:! Container where .Element == i32]\n    (c: T, i: i32) -> Optional(i32) {\n  // The elements of `c` have type `T.Element`, which is `i32`.\n  ...\n}\n\nfn PrintContainer[T:! Container where .Element is Printable](c: T) {\n  // The type of the elements of `c` is not known, but we do know\n  // that type satisfies the `Printable` interface.\n  ...\n}\n")),(0,i.kt)("p",null,"Constraints limit the types that the generic function can operate on, but\nincrease the knowledge that may be used in the body of the function to operate\non values of those types."),(0,i.kt)("p",null,"Constraints are also used when implementing an interface to specify the values\nof associated types (and other associated constants)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"class Vector(T:! Movable) {\n  impl as Stack where .ElementType = T { ... }\n}\n")),(0,i.kt)("h3",{id:"parameterized-impls"},"Parameterized impls"),(0,i.kt)("p",null,"Implementations can be parameterized to apply to multiple types. Those\nparameters can have constraints to restrict when the implementation applies.\nWhen multiple implementations apply, there is a rule to pick which one is\nconsidered the most specific:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"All type parameters in each ",(0,i.kt)("inlineCode",{parentName:"li"},"impl")," declaration are replaced with question\nmarks ",(0,i.kt)("inlineCode",{parentName:"li"},"?"),". This is called the type structure of the ",(0,i.kt)("inlineCode",{parentName:"li"},"impl")," declaration."),(0,i.kt)("li",{parentName:"ul"},"Given two type structures, find the first difference when read from\nleft-to-right. The one with a ",(0,i.kt)("inlineCode",{parentName:"li"},"?")," is less specific, the one with a concrete\ntype name in that position is more specific."),(0,i.kt)("li",{parentName:"ul"},"If there is more than one ",(0,i.kt)("inlineCode",{parentName:"li"},"impl")," declaration with the most specific type\nstructure, pick the one listed first in the priority ordering.")),(0,i.kt)("p",null,"To ensure ",(0,i.kt)("a",{parentName:"p",href:"/docs/design/generics/goals#coherence"},"coherence"),", an ",(0,i.kt)("inlineCode",{parentName:"p"},"impl")," may only be declared in a\nlibrary defining some name from its type structure. If a library defines\nmultiple implementations with the same type structure, they must be listed in\npriority order in a prioritization block."),(0,i.kt)("h3",{id:"operator-overloading"},"Operator overloading"),(0,i.kt)("p",null,"To overload an operator, implement the corresponding interface from the standard\nlibrary. For example, to define how the unary ",(0,i.kt)("inlineCode",{parentName:"p"},"-")," operator behaves for a type,\nimplement the ",(0,i.kt)("inlineCode",{parentName:"p"},"Negatable")," interface for that type. The interfaces and rewrites\nused for a given operator may be found in the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/design/expressions/"},"expressions design"),"."),(0,i.kt)("p",null,"As a convenience, there is a shortcut for defining an implementation that\nsupports any type implicitly convertible to a specified type, using ",(0,i.kt)("inlineCode",{parentName:"p"},"like"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"// Support multiplying values of type `Distance` with\n// values of type `f64` or any type implicitly\n// convertible to `f64`.\nexternal impl Distance as MultipliableWith(like f64) ...\n")),(0,i.kt)("h2",{id:"future-work"},"Future work"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Functions should have a way to accept types that vary at runtime."),(0,i.kt)("li",{parentName:"ul"},"You should have the ability to mark entities as ",(0,i.kt)("inlineCode",{parentName:"li"},"upcoming")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"deprecated"),"\nto support evolution."),(0,i.kt)("li",{parentName:"ul"},"There should be a way to define generic associated and higher-ranked/kinded\ntypes.")),(0,i.kt)("h2",{id:"references"},"References"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/pull/524"},"#524: Generics overview")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/pull/731"},"#731: Generics details 2: adapters, associated types, parameterized interfaces")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/pull/818"},"#818: Constraints for generics (generics details 3)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/pull/920"},"#920: Generic parameterized impls (details 5)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/pull/950"},"#950: Generic details 6: remove facets")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/pull/1013"},"#1013: Generics: Set associated constants using ",(0,i.kt)("inlineCode",{parentName:"a"},"where")," constraints")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/pull/1084"},"#1084: Generics details 9: forward declarations"))))}c.isMDXComponent=!0}}]);