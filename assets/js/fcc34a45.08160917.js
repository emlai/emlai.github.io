"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5212],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3794:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={},i="Blocks and statements",s={unversionedId:"blocks_and_statements",id:"blocks_and_statements",title:"Blocks and statements",description:"\x3c!--",source:"@site/../docs/design/blocks_and_statements.md",sourceDirName:".",slug:"/blocks_and_statements",permalink:"/design/blocks_and_statements",draft:!1,editUrl:"https://github.com/carbon-language/carbon-lang/blob/trunk/docs/design/blocks_and_statements.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Aliases",permalink:"/design/aliases"},next:{title:"Classes",permalink:"/design/classes"}},l={},c=[{value:"Table of contents",id:"table-of-contents",level:2},{value:"TODO",id:"todo",level:2},{value:"Overview",id:"overview",level:2}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"blocks-and-statements"},"Blocks and statements"),(0,a.kt)("h2",{id:"table-of-contents"},"Table of contents"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#todo"},"TODO")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#overview"},"Overview"))),(0,a.kt)("h2",{id:"todo"},"TODO"),(0,a.kt)("p",null,"This is a skeletal design, added to support ",(0,a.kt)("a",{parentName:"p",href:"/design/"},"the overview"),". It should\nnot be treated as accepted by the core team; rather, it is a placeholder until\nwe have more time to examine this detail. Please feel welcome to rewrite and\nupdate as appropriate."),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"The body or definition of a function is provided by a block of code containing\nstatements, much like in C or C++. The body of a function is also a new, nested\nscope inside the function's scope (meaning that parameter names are available).\nStatements within a block are terminated by a semicolon. Each statement can,\namong other things, be an expression. Here is a trivial example of a function\ndefinition using a block of statements:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"fn Foo() {\n  Bar();\n  Baz();\n}\n")),(0,a.kt)("p",null,"Statements can also themselves be a block of statements, which provide scopes\nand nesting:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"fn Foo() {\n  Bar();\n  {\n    Baz();\n  }\n}\n")))}d.isMDXComponent=!0}}]);