"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7640],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>c});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),m=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=m(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=m(n),c=r,k=u["".concat(p,".").concat(c)]||u[c]||d[c]||l;return n?a.createElement(k,i(i({ref:t},s),{},{components:n})):a.createElement(k,i({ref:t},s))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var m=2;m<l;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3640:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>m});var a=n(7462),r=(n(7294),n(3905));const l={},i="Naming conventions",o={unversionedId:"docs/design/naming_conventions",id:"docs/design/naming_conventions",title:"Naming conventions",description:"\x3c!--",source:"@site/../docs/design/naming_conventions.md",sourceDirName:"docs/design",slug:"/docs/design/naming_conventions",permalink:"/docs/design/naming_conventions",draft:!1,editUrl:"https://github.com/carbon-language/carbon-lang/blob/trunk/docs/../docs/design/naming_conventions.md",tags:[],version:"current",frontMatter:{},sidebar:"design",previous:{title:"Name lookup",permalink:"/docs/design/name_lookup"},next:{title:"Pattern matching",permalink:"/docs/design/pattern_matching"}},p={},m=[{value:"Table of contents",id:"table-of-contents",level:2},{value:"Overview",id:"overview",level:2},{value:"Details",id:"details",level:2},{value:"Constants",id:"constants",level:3},{value:"Carbon-provided item naming",id:"carbon-provided-item-naming",level:3},{value:"Alternatives considered",id:"alternatives-considered",level:2},{value:"References",id:"references",level:2}],s={toc:m};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"naming-conventions"},"Naming conventions"),(0,r.kt)("h2",{id:"table-of-contents"},"Table of contents"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#overview"},"Overview")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#details"},"Details"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#constants"},"Constants")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#carbon-provided-item-naming"},"Carbon-provided item naming")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#alternatives-considered"},"Alternatives considered")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#references"},"References"))),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"Our naming conventions are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"For idiomatic Carbon code:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"UpperCamelCase")," will be used when the named entity cannot have a\ndynamically varying value. For example, functions, namespaces, or\ncompile-time constant values."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"lower_snake_case")," will be used when the named entity's value won't be\nknown until runtime, such as for variables."))),(0,r.kt)("li",{parentName:"ul"},"For Carbon-provided features:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Keywords and type literals will use ",(0,r.kt)("inlineCode",{parentName:"li"},"lower_snake_case"),"."),(0,r.kt)("li",{parentName:"ul"},"Other code will use the guidelines for idiomatic Carbon code.")))),(0,r.kt)("p",null,"In other words:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Item"),(0,r.kt)("th",{parentName:"tr",align:null},"Convention"),(0,r.kt)("th",{parentName:"tr",align:null},"Explanation"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Packages"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UpperCamelCase")),(0,r.kt)("td",{parentName:"tr",align:null},"Used for compile-time lookup.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Types"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UpperCamelCase")),(0,r.kt)("td",{parentName:"tr",align:null},"Resolved at compile-time.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Functions"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UpperCamelCase")),(0,r.kt)("td",{parentName:"tr",align:null},"Resolved at compile-time.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Methods"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UpperCamelCase")),(0,r.kt)("td",{parentName:"tr",align:null},"Methods, including virtual methods, are equivalent to functions.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Generic parameters"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UpperCamelCase")),(0,r.kt)("td",{parentName:"tr",align:null},"May vary based on inputs, but are ultimately resolved at compile-time.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Compile-time constants"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UpperCamelCase")),(0,r.kt)("td",{parentName:"tr",align:null},"Resolved at compile-time. See ",(0,r.kt)("a",{parentName:"td",href:"#constants"},"constants")," for more remarks.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Variables"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"lower_snake_case")),(0,r.kt)("td",{parentName:"tr",align:null},"May be reassigned and thus require runtime information.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Member variables"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"lower_snake_case")),(0,r.kt)("td",{parentName:"tr",align:null},"Behave like variables.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Keywords"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"lower_snake_case")),(0,r.kt)("td",{parentName:"tr",align:null},"Special, and developers can be expected to be comfortable with this casing cross-language.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Type literals"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"lower_snake_case")),(0,r.kt)("td",{parentName:"tr",align:null},"Equivalent to keywords.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Boolean type and literals"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"lower_snake_case")),(0,r.kt)("td",{parentName:"tr",align:null},"Equivalent to keywords.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Other Carbon types"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UpperCamelCase")),(0,r.kt)("td",{parentName:"tr",align:null},"Behave like normal types.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Self")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"Base")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UpperCamelCase")),(0,r.kt)("td",{parentName:"tr",align:null},"These are similar to type members on a class.")))),(0,r.kt)("p",null,"We only use ",(0,r.kt)("inlineCode",{parentName:"p"},"UpperCamelCase")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"lower_snake_case")," in naming conventions in\norder to minimize the variation in rules."),(0,r.kt)("h2",{id:"details"},"Details"),(0,r.kt)("h3",{id:"constants"},"Constants"),(0,r.kt)("p",null,"Consider the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-carbon"},"package Example;\n\nlet CompileTimeConstant: i32 = 7;\n\nfn RuntimeFunction(runtime_constant: i32);\n")),(0,r.kt)("p",null,"In this example, ",(0,r.kt)("inlineCode",{parentName:"p"},"CompileTimeConstant")," has a singular value (",(0,r.kt)("inlineCode",{parentName:"p"},"7"),") which is known\nat compile-time. As such, it uses ",(0,r.kt)("inlineCode",{parentName:"p"},"UpperCamelCase"),"."),(0,r.kt)("p",null,"On the other hand, ",(0,r.kt)("inlineCode",{parentName:"p"},"runtime_constant")," may be constant within the function body,\nbut it is assigned at runtime when ",(0,r.kt)("inlineCode",{parentName:"p"},"RuntimeFunction")," is called. Its value is\nonly known in a given runtime invocation of ",(0,r.kt)("inlineCode",{parentName:"p"},"RuntimeFunction"),". As such, it uses\n",(0,r.kt)("inlineCode",{parentName:"p"},"lower_snake_case"),"."),(0,r.kt)("h3",{id:"carbon-provided-item-naming"},"Carbon-provided item naming"),(0,r.kt)("p",null,"Carbon-provided items are split into a few categories:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Keywords; for example, ",(0,r.kt)("inlineCode",{parentName:"li"},"for"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"fn"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"var"),"."),(0,r.kt)("li",{parentName:"ul"},"Type literals; for example, ",(0,r.kt)("inlineCode",{parentName:"li"},"i<digits>"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"u<digits>"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"f<digits>"),"."),(0,r.kt)("li",{parentName:"ul"},"Boolean type and literals; for example, ",(0,r.kt)("inlineCode",{parentName:"li"},"bool"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),".",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The separate categorization of booleans should not be taken as a rule\nthat only booleans would use lowercase; it's just the only example right\nnow."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Self")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Base"),"."),(0,r.kt)("li",{parentName:"ul"},"Other Carbon types; for example, ",(0,r.kt)("inlineCode",{parentName:"li"},"Int"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"UInt"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"String"),".")),(0,r.kt)("p",null,"Note that while other Carbon types currently use ",(0,r.kt)("inlineCode",{parentName:"p"},"UpperCamelCase"),", that should\nnot be inferred to mean that future Carbon types will do the same. The leads\nwill make decisions on future naming."),(0,r.kt)("h2",{id:"alternatives-considered"},"Alternatives considered"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0861.md#other-naming-conventions"},"Other naming conventions")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0861.md#other-conventions-for-naming-carbon-types"},"Other conventions for naming Carbon types"))),(0,r.kt)("h2",{id:"references"},"References"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Proposal\n",(0,r.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/pull/861"},"#861: Naming conventions"))))}d.isMDXComponent=!0}}]);