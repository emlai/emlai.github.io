"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6093],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(t),m=o,h=u["".concat(p,".").concat(m)]||u[m]||c[m]||r;return t?a.createElement(h,i(i({ref:n},d),{},{components:t})):a.createElement(h,i({ref:n},d))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=u;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},142:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=t(7462),o=(t(7294),t(3905));const r={},i="Logical operators",l={unversionedId:"docs/design/expressions/logical_operators",id:"docs/design/expressions/logical_operators",title:"Logical operators",description:"\x3c!--",source:"@site/../docs/design/expressions/logical_operators.md",sourceDirName:"docs/design/expressions",slug:"/docs/design/expressions/logical_operators",permalink:"/docs/design/expressions/logical_operators",draft:!1,editUrl:"https://github.com/carbon-language/carbon-lang/blob/trunk/docs/../docs/design/expressions/logical_operators.md",tags:[],version:"current",frontMatter:{},sidebar:"design",previous:{title:"Implicit conversions",permalink:"/docs/design/expressions/implicit_conversions"},next:{title:"Qualified names and member access",permalink:"/docs/design/expressions/member_access"}},p={},s=[{value:"Overview",id:"overview",level:2},{value:"Details",id:"details",level:2},{value:"Precedence",id:"precedence",level:3},{value:"Associativity",id:"associativity",level:3},{value:"Conversions",id:"conversions",level:3},{value:"Overloading",id:"overloading",level:3},{value:"Alternatives considered",id:"alternatives-considered",level:2},{value:"References",id:"references",level:2}],d={toc:s};function c(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"logical-operators"},"Logical operators"),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"Carbon provides three operators to support logical operations on ",(0,o.kt)("inlineCode",{parentName:"p"},"bool")," values:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"and")," provides a logical AND operation.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"x and y")," evaluates to ",(0,o.kt)("inlineCode",{parentName:"li"},"true")," if both operands are ",(0,o.kt)("inlineCode",{parentName:"li"},"true"),"."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"or")," provides a logical OR operation.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"x or y")," evaluates to ",(0,o.kt)("inlineCode",{parentName:"li"},"true")," if either operand is ",(0,o.kt)("inlineCode",{parentName:"li"},"true"),"."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"not")," provides a logical NOT operation.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"not x")," evaluates to ",(0,o.kt)("inlineCode",{parentName:"li"},"true")," if the operand is ",(0,o.kt)("inlineCode",{parentName:"li"},"false"),".")))),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"and")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"or")," are infix binary operators, and use\n",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Short-circuit_evaluation"},"short-circuit evaluation"),".\n",(0,o.kt)("inlineCode",{parentName:"p"},"not")," is a prefix unary operator."),(0,o.kt)("h2",{id:"details"},"Details"),(0,o.kt)("h3",{id:"precedence"},"Precedence"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"and")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"or")," have very low precedence. When an expression appearing as the\ncondition of an ",(0,o.kt)("inlineCode",{parentName:"p"},"if")," uses these operators unparenthesized, they are always the\nlowest precedence operators in that expression."),(0,o.kt)("p",null,"These operators permit any reasonable operator that might be used to form a\n",(0,o.kt)("inlineCode",{parentName:"p"},"bool")," value as a subexpression. In particular, comparison operators such as ",(0,o.kt)("inlineCode",{parentName:"p"},"<"),"\nand ",(0,o.kt)("inlineCode",{parentName:"p"},"==")," have higher precedence than ",(0,o.kt)("inlineCode",{parentName:"p"},"and")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"or"),". However, the precedence of\n",(0,o.kt)("inlineCode",{parentName:"p"},"and")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"or")," is not directly comparable with each other, so they cannot both\nbe used directly in an expression without parentheses."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"not")," is higher precedence than ",(0,o.kt)("inlineCode",{parentName:"p"},"and")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"or"),", but its precedence is\nincomparable with most other operators, including comparison operators."),(0,o.kt)("p",null,"For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-carbon"},"// \u2705 Valid: `and` is lower precedence than the `<` or `==` operators.\nif (n + m == 3 and not n < m) {\n  ...\n}\n// The above is equivalent to:\nif (((n + m) == 3) and (not (n < m))) {\n  ...\n}\n\n// \u274c Invalid: `and` and `or` precedence is incomparable.\nif (cond1 and cond2 or cond3) {\n  ...\n}\n// \u2705 Valid: Parentheses avoid the precedence check.\nif (cond1 and (cond2 or cond3)) {\n  ...\n}\n\n// \u274c  Invalid: `not` precedence is incomparable with `==`.\nif (not cond1 == cond2) {\n  ...\n}\n// \u274c  Invalid: `not` precedence is incomparable with `==`.\nif (cond1 == not cond2) {\n  ...\n}\n// \u2705 Valid: Parentheses avoid the precedence check.\nif (cond1 == (not cond2)) {\n  ...\n}\n")),(0,o.kt)("h3",{id:"associativity"},"Associativity"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"and")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"or")," are left-associative. A ",(0,o.kt)("inlineCode",{parentName:"p"},"not")," expression cannot be the operand of\nanother ",(0,o.kt)("inlineCode",{parentName:"p"},"not")," expression; ",(0,o.kt)("inlineCode",{parentName:"p"},"not not b")," is an error without parentheses."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"// \u2705 Valid: `and` is left-associative, and precedence is fine.\nif (not a and not b and not c) {\n  ...\n}\n// The above is equivalent to:\nif ((not a) and ((not b) and (not c))) {\n  ...\n}\n// \u2705 Valid: Parentheses avoid the `not` associativity error.\nif (not (not a)) {\n  ...\n}\n\n// \u274c Invalid: `not not` associativity requires parentheses.\nif (not not a) {\n  ...\n}\n")),(0,o.kt)("h3",{id:"conversions"},"Conversions"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"TODO: This should be addressed through a standard ",(0,o.kt)("inlineCode",{parentName:"p"},"bool")," conversion design.")),(0,o.kt)("p",null,"The operand of ",(0,o.kt)("inlineCode",{parentName:"p"},"and"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"or"),", or ",(0,o.kt)("inlineCode",{parentName:"p"},"not")," is converted to a ",(0,o.kt)("inlineCode",{parentName:"p"},"bool")," value in the same\nway as the condition of an ",(0,o.kt)("inlineCode",{parentName:"p"},"if")," statement. In particular:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If we decide that certain values, such as pointers or integers, should not\nbe usable as the condition of an ",(0,o.kt)("inlineCode",{parentName:"li"},"if")," without an explicit comparison against\nnull or zero, then those values will also not be usable as the operand of\n",(0,o.kt)("inlineCode",{parentName:"li"},"and"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"or"),", or ",(0,o.kt)("inlineCode",{parentName:"li"},"not")," without an explicit comparison."),(0,o.kt)("li",{parentName:"ul"},"If an extension point is provided to determine how to branch on the truth of\na value in an ",(0,o.kt)("inlineCode",{parentName:"li"},"if")," (such as by supplying a conversion to a ",(0,o.kt)("inlineCode",{parentName:"li"},"bool")," type),\nthat extension point will also apply to ",(0,o.kt)("inlineCode",{parentName:"li"},"and"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"or"),", and ",(0,o.kt)("inlineCode",{parentName:"li"},"not"),".")),(0,o.kt)("h3",{id:"overloading"},"Overloading"),(0,o.kt)("p",null,"The logical operators ",(0,o.kt)("inlineCode",{parentName:"p"},"and"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"or"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"not")," are not overloadable. As noted\nabove, any mechanism that allows types to customize how ",(0,o.kt)("inlineCode",{parentName:"p"},"if")," treats them will\nalso customize how ",(0,o.kt)("inlineCode",{parentName:"p"},"and"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"or"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"not")," treats them."),(0,o.kt)("h2",{id:"alternatives-considered"},"Alternatives considered"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0680.md#use-punctuation-spelling-for-all-three-operators"},"Use punctuation spelling for all three operators")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0680.md#precedence-of-and-versus-or"},"Precedence of AND versus OR")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0680.md#precedence-of-not"},"Precedence of NOT")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0680.md#punctuation-form-of-not"},"Punctuation form of NOT")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0680.md#two-forms-of-not"},"Two forms of NOT")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0680.md#repeated-not"},"Repeated NOT")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0680.md#and-and-or-produce-the-decisive-value"},"AND and OR produce the decisive value"))),(0,o.kt)("h2",{id:"references"},"References"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Proposal\n",(0,o.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/pull/680"},"#680: And, or, not"),"."),(0,o.kt)("li",{parentName:"ul"},"Proposal\n",(0,o.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/pull/702"},"#702: Comparison operators"),".")))}c.isMDXComponent=!0}}]);