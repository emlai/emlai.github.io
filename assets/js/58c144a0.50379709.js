"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5267],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=s(n),f=a,m=d["".concat(c,".").concat(f)]||d[f]||u[f]||i;return n?r.createElement(m,l(l({ref:t},p),{},{components:n})):r.createElement(m,l({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},11:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const i={},l="Whitespace",o={unversionedId:"docs/design/lexical_conventions/whitespace",id:"docs/design/lexical_conventions/whitespace",title:"Whitespace",description:"\x3c!--",source:"@site/../docs/design/lexical_conventions/whitespace.md",sourceDirName:"docs/design/lexical_conventions",slug:"/docs/design/lexical_conventions/whitespace",permalink:"/docs/design/lexical_conventions/whitespace",draft:!1,editUrl:"https://github.com/carbon-language/carbon-lang/blob/trunk/docs/../docs/design/lexical_conventions/whitespace.md",tags:[],version:"current",frontMatter:{},sidebar:"design",previous:{title:"String literals",permalink:"/docs/design/lexical_conventions/string_literals"},next:{title:"Words",permalink:"/docs/design/lexical_conventions/words"}},c={},s=[{value:"Table of contents",id:"table-of-contents",level:2},{value:"Overview",id:"overview",level:2},{value:"References",id:"references",level:2}],p={toc:s};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"whitespace"},"Whitespace"),(0,a.kt)("h2",{id:"table-of-contents"},"Table of contents"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#overview"},"Overview")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#references"},"References"))),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"The exact lexical form of Carbon whitespace has not yet been settled. However,\nCarbon will follow lexical conventions for whitespace based on\n",(0,a.kt)("a",{parentName:"p",href:"https://unicode.org/reports/tr31/"},"Unicode Annex #31"),". TODO: Update this once\nthe precise rules are decided; see the\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0142.md#characters-in-identifiers-and-whitespace"},"Unicode source files"),"\nproposal."),(0,a.kt)("p",null,"Unicode Annex #31 suggests selecting whitespace characters based on the\ncharacters with Unicode property ",(0,a.kt)("inlineCode",{parentName:"p"},"Pattern_White_Space"),", which is currently these\n11 characters:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Horizontal whitespace:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"U+0009 CHARACTER TABULATION (horizontal tab)"),(0,a.kt)("li",{parentName:"ul"},"U+0020 SPACE"),(0,a.kt)("li",{parentName:"ul"},"U+200E LEFT-TO-RIGHT MARK"),(0,a.kt)("li",{parentName:"ul"},"U+200F RIGHT-TO-LEFT MARK"))),(0,a.kt)("li",{parentName:"ul"},"Vertical whitespace:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"U+000A LINE FEED (traditional newline)"),(0,a.kt)("li",{parentName:"ul"},"U+000B LINE TABULATION (vertical tab)"),(0,a.kt)("li",{parentName:"ul"},"U+000C FORM FEED (page break)"),(0,a.kt)("li",{parentName:"ul"},"U+000D CARRIAGE RETURN"),(0,a.kt)("li",{parentName:"ul"},"U+0085 NEXT LINE (Unicode newline)"),(0,a.kt)("li",{parentName:"ul"},"U+2028 LINE SEPARATOR"),(0,a.kt)("li",{parentName:"ul"},"U+2029 PARAGRAPH SEPARATOR")))),(0,a.kt)("p",null,"The quantity and kind of whitespace separating tokens is ignored except where\notherwise specified."),(0,a.kt)("h2",{id:"references"},"References"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Proposal\n",(0,a.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/pull/142"},"#142: Unicode source files"))))}u.isMDXComponent=!0}}]);