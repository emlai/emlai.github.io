"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4643],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=s(n),d=l,k=m["".concat(p,".").concat(d)]||m[d]||c[d]||r;return n?a.createElement(k,i(i({ref:t},u),{},{components:n})):a.createElement(k,i({ref:t},u))}));function d(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6822:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var a=n(7462),l=(n(7294),n(3905));const r={},i="Control flow",o={unversionedId:"docs/design/control_flow/conditionals",id:"docs/design/control_flow/conditionals",title:"Control flow",description:"\x3c!--",source:"@site/../docs/design/control_flow/conditionals.md",sourceDirName:"docs/design/control_flow",slug:"/docs/design/control_flow/conditionals",permalink:"/docs/design/control_flow/conditionals",draft:!1,editUrl:"https://github.com/carbon-language/carbon-lang/blob/trunk/docs/../docs/design/control_flow/conditionals.md",tags:[],version:"current",frontMatter:{},sidebar:"design",previous:{title:"Control flow",permalink:"/docs/design/control_flow/"},next:{title:"Loops",permalink:"/docs/design/control_flow/loops"}},p={},s=[{value:"Overview",id:"overview",level:2},{value:"Alternatives considered",id:"alternatives-considered",level:2},{value:"References",id:"references",level:2}],u={toc:s};function c(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"control-flow"},"Control flow"),(0,l.kt)("h2",{id:"overview"},"Overview"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"if")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"else")," provide conditional execution of statements. Syntax is:"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("inlineCode",{parentName:"p"},"if ("),(0,l.kt)("em",{parentName:"p"},"boolean expression")," ",(0,l.kt)("inlineCode",{parentName:"p"},") {")," ",(0,l.kt)("em",{parentName:"p"},"statements")," ",(0,l.kt)("inlineCode",{parentName:"p"},"}")),(0,l.kt)("p",{parentName:"blockquote"},"[ ",(0,l.kt)("inlineCode",{parentName:"p"},"else if (")," ",(0,l.kt)("em",{parentName:"p"},"boolean expression")," ",(0,l.kt)("inlineCode",{parentName:"p"},") {")," ",(0,l.kt)("em",{parentName:"p"},"statements")," ",(0,l.kt)("inlineCode",{parentName:"p"},"}")," ]"," ..."),(0,l.kt)("p",{parentName:"blockquote"},"[ ",(0,l.kt)("inlineCode",{parentName:"p"},"else {")," ",(0,l.kt)("em",{parentName:"p"},"statements")," ",(0,l.kt)("inlineCode",{parentName:"p"},"}")," ]")),(0,l.kt)("p",null,"Only one group of statements will execute:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"When the first ",(0,l.kt)("inlineCode",{parentName:"li"},"if"),"'s boolean expression evaluates to true, its associated\nstatements will execute."),(0,l.kt)("li",{parentName:"ul"},"When earlier boolean expressions evaluate to false and an ",(0,l.kt)("inlineCode",{parentName:"li"},"else if"),"'s\nboolean expression evaluates to true, its associated statements will\nexecute.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"... else if ...")," is equivalent to ",(0,l.kt)("inlineCode",{parentName:"li"},"... else { if ... }"),", but without\nvisible nesting of braces."))),(0,l.kt)("li",{parentName:"ul"},"When all boolean expressions evaluate to false, the ",(0,l.kt)("inlineCode",{parentName:"li"},"else"),"'s associated\nstatements will execute.")),(0,l.kt)("p",null,"When a boolean expression evaluates to true, no later boolean expressions will\nevaluate."),(0,l.kt)("p",null,"Note that ",(0,l.kt)("inlineCode",{parentName:"p"},"else if")," may be repeated."),(0,l.kt)("p",null,"For example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-carbon"},'if (fruit.IsYellow()) {\n  Print("Banana!");\n} else if (fruit.IsOrange()) {\n  Print("Orange!");\n} else if (fruit.IsGreen()) {\n  Print("Apple!");\n} else {\n  Print("Vegetable!");\n}\nfruit.Eat();\n')),(0,l.kt)("p",null,"This code will:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Evaluate ",(0,l.kt)("inlineCode",{parentName:"li"},"fruit.IsYellow()"),":",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"When ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", print ",(0,l.kt)("inlineCode",{parentName:"li"},"Banana!")," and resume execution at ",(0,l.kt)("inlineCode",{parentName:"li"},"fruit.Eat()"),"."),(0,l.kt)("li",{parentName:"ul"},"When ",(0,l.kt)("inlineCode",{parentName:"li"},"False"),", evaluate ",(0,l.kt)("inlineCode",{parentName:"li"},"fruit.IsOrange()"),":",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"When ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", print ",(0,l.kt)("inlineCode",{parentName:"li"},"Orange!")," and resume execution at ",(0,l.kt)("inlineCode",{parentName:"li"},"fruit.Eat()"),"."),(0,l.kt)("li",{parentName:"ul"},"When ",(0,l.kt)("inlineCode",{parentName:"li"},"False"),", evaluate ",(0,l.kt)("inlineCode",{parentName:"li"},"fruit.IsGreen()"),":",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"When ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", print ",(0,l.kt)("inlineCode",{parentName:"li"},"Orange!")," and resume execution at\n",(0,l.kt)("inlineCode",{parentName:"li"},"fruit.Eat()"),"."),(0,l.kt)("li",{parentName:"ul"},"When ",(0,l.kt)("inlineCode",{parentName:"li"},"False"),", print ",(0,l.kt)("inlineCode",{parentName:"li"},"Vegetable!")," and resume execution at\n",(0,l.kt)("inlineCode",{parentName:"li"},"fruit.Eat()"),".")))))))),(0,l.kt)("h2",{id:"alternatives-considered"},"Alternatives considered"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0623.md#optional-braces"},"Optional braces")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0623.md#optional-parentheses"},"Optional parentheses")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0623.md#elif"},(0,l.kt)("inlineCode",{parentName:"a"},"elif")))),(0,l.kt)("h2",{id:"references"},"References"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Proposal\n",(0,l.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/pull/285"},"#285: ",(0,l.kt)("inlineCode",{parentName:"a"},"if")," and ",(0,l.kt)("inlineCode",{parentName:"a"},"else"))),(0,l.kt)("li",{parentName:"ul"},"Proposal\n",(0,l.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/pull/623"},"#623: Require braces"))))}c.isMDXComponent=!0}}]);