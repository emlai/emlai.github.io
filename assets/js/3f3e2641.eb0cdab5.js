"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7362],{3905:(e,n,r)=>{r.d(n,{Zo:()=>d,kt:()=>m});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=t.createContext({}),c=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},d=function(e){var n=c(e.components);return t.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(r),m=o,f=u["".concat(s,".").concat(m)]||u[m]||p[m]||a;return r?t.createElement(f,i(i({ref:n},d),{},{components:r})):t.createElement(f,i({ref:n},d))}));function m(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=r[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},4744:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var t=r(7462),o=(r(7294),r(3905));const a={},i="Source files",l={unversionedId:"docs/design/code_and_name_organization/source_files",id:"docs/design/code_and_name_organization/source_files",title:"Source files",description:"\x3c!--",source:"@site/../docs/design/code_and_name_organization/source_files.md",sourceDirName:"docs/design/code_and_name_organization",slug:"/docs/design/code_and_name_organization/source_files",permalink:"/docs/design/code_and_name_organization/source_files",draft:!1,editUrl:"https://github.com/carbon-language/carbon-lang/blob/trunk/docs/../docs/design/code_and_name_organization/source_files.md",tags:[],version:"current",frontMatter:{},sidebar:"design",previous:{title:"Code and name organization",permalink:"/docs/design/code_and_name_organization/"},next:{title:"Control flow",permalink:"/docs/design/control_flow/"}},s={},c=[{value:"Overview",id:"overview",level:2},{value:"Encoding",id:"encoding",level:2},{value:"Alternatives considered",id:"alternatives-considered",level:2},{value:"References",id:"references",level:2}],d={toc:c};function p(e){let{components:n,...r}=e;return(0,o.kt)("wrapper",(0,t.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"source-files"},"Source files"),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"A Carbon ",(0,o.kt)("em",{parentName:"p"},"source file"),' is a sequence of Unicode code points in Unicode\nNormalization Form C ("NFC"), and represents a portion of the complete text of a\nprogram.'),(0,o.kt)("p",null,'Program text can come from a variety of sources, such as an interactive\nprogramming environment (a so-called "Read-Evaluate-Print-Loop" or REPL), a\ndatabase, a memory buffer of an IDE, or a command-line argument.'),(0,o.kt)("p",null,"The canonical representation for Carbon programs is in files stored as a\nsequence of bytes in a file system on disk. Such files have a ",(0,o.kt)("inlineCode",{parentName:"p"},".carbon"),"\nextension."),(0,o.kt)("h2",{id:"encoding"},"Encoding"),(0,o.kt)("p",null,"The on-disk representation of a Carbon source file is encoded in UTF-8. Such\nfiles may begin with an optional UTF-8 BOM, that is, the byte sequence\nEF",(0,o.kt)("sub",null,"16"),",BB",(0,o.kt)("sub",null,"16"),",BF",(0,o.kt)("sub",null,"16"),". This prefix, if present, is\nignored."),(0,o.kt)("p",null,"No Unicode normalization is performed when reading an on-disk representation of\na Carbon source file, so the byte representation is required to be normalized in\nNormalization Form C. The Carbon source formatting tool will convert source\nfiles to NFC as necessary."),(0,o.kt)("h2",{id:"alternatives-considered"},"Alternatives considered"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0142.md#character-encoding-1"},"Character encoding")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0142.md#byte-order-marks"},"Byte order marks")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0142.md#normalization-forms"},"Normalization forms"))),(0,o.kt)("h2",{id:"references"},"References"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Proposal\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/carbon-language/carbon-lang/pull/142"},"#142: Unicode source files"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://www.unicode.org/versions/latest/"},"Unicode")," is a universal character\nencoding, maintained by the\n",(0,o.kt)("a",{parentName:"p",href:"https://home.unicode.org/basic-info/overview/"},"Unicode Consortium"),". It is\nthe canonical encoding used for textual information interchange across all\nmodern technology."),(0,o.kt)("p",{parentName:"li"},"Carbon is based on Unicode 13.0, which is currently the latest version of\nthe Unicode standard. Newer versions will be considered for adoption as they\nare released.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://www.unicode.org/reports/tr15/tr15-50.html"},"Unicode Standard Annex #15: Unicode Normalization Forms"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Unicode_equivalence#Normal_forms"},"Wikipedia Unicode equivalence page: Normal forms")))))}p.isMDXComponent=!0}}]);