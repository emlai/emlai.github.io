"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1901],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=u(n),f=a,m=d["".concat(l,".").concat(f)]||d[f]||s[f]||o;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6293:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>s,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const o={},i="Execution",c={unversionedId:"lang/execution",id:"lang/execution",title:"Execution",description:"\x3c!--",source:"@site/../docs/spec/lang/execution.md",sourceDirName:"lang",slug:"/lang/execution",permalink:"/spec/lang/execution",draft:!1,editUrl:"https://github.com/carbon-language/carbon-lang/blob/trunk/docs/spec/lang/execution.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Carbon language specification",permalink:"/spec/lang/"},next:{title:"Lexical analysis",permalink:"/spec/lang/lex"}},l={},u=[{value:"Entry points",id:"entry-points",level:2},{value:"Object model",id:"object-model",level:2},{value:"Sequential execution",id:"sequential-execution",level:2},{value:"Threads and data races",id:"threads-and-data-races",level:2}],p={toc:u};function s(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"execution"},"Execution"),(0,a.kt)("h2",{id:"entry-points"},"Entry points"),(0,a.kt)("p",null,"TODO: Entry points (Carbon and foreign). ",(0,a.kt)("inlineCode",{parentName:"p"},"fn Run()"),"."),(0,a.kt)("h2",{id:"object-model"},"Object model"),(0,a.kt)("h2",{id:"sequential-execution"},"Sequential execution"),(0,a.kt)("h2",{id:"threads-and-data-races"},"Threads and data races"))}s.isMDXComponent=!0}}]);