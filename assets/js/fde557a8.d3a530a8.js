"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7943],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),u=r,f=d["".concat(p,".").concat(u)]||d[u]||m[u]||i;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8413:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const i={},o="Glossary",l={unversionedId:"docs/guides/glossary",id:"docs/guides/glossary",title:"Glossary",description:"\x3c!--",source:"@site/../docs/guides/glossary.md",sourceDirName:"docs/guides",slug:"/docs/guides/glossary",permalink:"/docs/guides/glossary",draft:!1,editUrl:"https://github.com/carbon-language/carbon-lang/blob/trunk/docs/../docs/guides/glossary.md",tags:[],version:"current",frontMatter:{},sidebar:"guides",previous:{title:"Guides",permalink:"/docs/guides/"}},p={},s=[{value:"entity",id:"entity",level:2},{value:"identifier",id:"identifier",level:2},{value:"library",id:"library",level:2},{value:"name path",id:"name-path",level:2},{value:"namespace",id:"namespace",level:2},{value:"package",id:"package",level:2}],c={toc:s};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"glossary"},"Glossary"),(0,r.kt)("h2",{id:"entity"},"entity"),(0,r.kt)("p",null,"An ",(0,r.kt)("em",{parentName:"p"},"entity")," is a named item with an associated name path, such as a function,\ntype, interface, or namespace. For example, in ",(0,r.kt)("inlineCode",{parentName:"p"},"fn GetTime()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"GetTime")," refers\nto an entity which is a function."),(0,r.kt)("h2",{id:"identifier"},"identifier"),(0,r.kt)("p",null,"An ",(0,r.kt)("em",{parentName:"p"},"identifier")," is the token which names an entity, and is also used in code to\nrefer to the entity. For example, in ",(0,r.kt)("inlineCode",{parentName:"p"},"fn GetTime()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"GetTime")," is the identifier\nfor the function."),(0,r.kt)("h2",{id:"library"},"library"),(0,r.kt)("p",null,"A ",(0,r.kt)("em",{parentName:"p"},"library")," is a group of files that form an importable API and its\nimplementation. Carbon encourages small libraries, bundled into larger packages.\nFor example, given ",(0,r.kt)("inlineCode",{parentName:"p"},"package Geometry library Shapes;"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Shapes")," is a library in\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"Geometry")," package."),(0,r.kt)("h2",{id:"name-path"},"name path"),(0,r.kt)("p",null,"A ",(0,r.kt)("em",{parentName:"p"},"name path")," is the dot-separated identifier list that indicates a relative or\nfull path of a name. For example, given ",(0,r.kt)("inlineCode",{parentName:"p"},"fn GetArea(var Geometry.Circle: x)"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"Geometry.Circle")," is a name path. ",(0,r.kt)("inlineCode",{parentName:"p"},"GetArea")," is also a name path, albeit with\nonly one identifier needed."),(0,r.kt)("h2",{id:"namespace"},"namespace"),(0,r.kt)("p",null,"A ",(0,r.kt)("em",{parentName:"p"},"namespace")," is a entity that contains entities, and may be nested. For\nexample, given a name path of ",(0,r.kt)("inlineCode",{parentName:"p"},"Geometry.Circle"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Geometry")," is a namespace\ncontaining ",(0,r.kt)("inlineCode",{parentName:"p"},"Circle"),"."),(0,r.kt)("h2",{id:"package"},"package"),(0,r.kt)("p",null,"A ",(0,r.kt)("em",{parentName:"p"},"package")," is a group of libraries in Carbon, and is the standard unit for\ndistribution. The package name also serves as the root namespace for all name\npaths in its libraries. The package name should be a single, globally-unique\nidentifier. For example, given ",(0,r.kt)("inlineCode",{parentName:"p"},"package Geometry;")," in a file, ",(0,r.kt)("inlineCode",{parentName:"p"},"Geometry")," is the\npackage and root namespace."))}m.isMDXComponent=!0}}]);