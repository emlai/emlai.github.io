"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6199],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),h=c(a),m=r,d=h["".concat(s,".").concat(m)]||h[m]||u[m]||o;return a?n.createElement(d,i(i({ref:t},p),{},{components:a})):n.createElement(d,i({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},4153:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const o={},i="Project FAQ",l={unversionedId:"faq",id:"faq",title:"Project FAQ",description:"\x3c!--",source:"@site/../docs/project/faq.md",sourceDirName:".",slug:"/faq",permalink:"/project/faq",draft:!1,editUrl:"https://github.com/carbon-language/carbon-lang/blob/trunk/docs/project/faq.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Evolution and governance",permalink:"/project/evolution"},next:{title:"Goals",permalink:"/project/goals"}},s={},c=[{value:"Table of contents",id:"table-of-contents",level:2},{value:"What is Carbon?",id:"what-is-carbon",level:2},{value:"What is Carbon&#39;s status?",id:"what-is-carbons-status",level:2},{value:"How soon can we use Carbon?",id:"how-soon-can-we-use-carbon",level:3},{value:"Why make Carbon public while it&#39;s still an experiment?",id:"why-make-carbon-public-while-its-still-an-experiment",level:3},{value:"How complete is Carbon&#39;s design?",id:"how-complete-is-carbons-design",level:3},{value:"How many people are involved in Carbon?",id:"how-many-people-are-involved-in-carbon",level:3},{value:"Is there a demo?",id:"is-there-a-demo",level:3},{value:"Why build Carbon?",id:"why-build-carbon",level:2},{value:"Why is performance critical?",id:"why-is-performance-critical",level:3},{value:"What level of C++ interoperability is expected?",id:"what-level-of-c-interoperability-is-expected",level:3},{value:"What would migrating C++ code to Carbon look like?",id:"what-would-migrating-c-code-to-carbon-look-like",level:3},{value:"What alternatives did you consider? Why did they not work?",id:"what-alternatives-did-you-consider-why-did-they-not-work",level:2},{value:"Why not improve C++?",id:"why-not-improve-c",level:3},{value:"Why not fork C++?",id:"why-not-fork-c",level:3},{value:"Why not Rust?",id:"why-not-rust",level:3},{value:"If you can use Rust, ignore Carbon",id:"if-you-can-use-rust-ignore-carbon",level:4},{value:"Why is adopting Rust difficult for C++ codebases?",id:"why-is-adopting-rust-difficult-for-c-codebases",level:4},{value:"Why not a garbage collected language, like Java, Kotlin, or Go?",id:"why-not-a-garbage-collected-language-like-java-kotlin-or-go",level:3},{value:"How will Carbon work?",id:"how-will-carbon-work",level:2},{value:"What compiler infrastructure is Carbon using?",id:"what-compiler-infrastructure-is-carbon-using",level:3},{value:"How will Carbon&#39;s bidirectional C++ interoperability work?",id:"how-will-carbons-bidirectional-c-interoperability-work",level:3},{value:"How do Carbon generics differ from templates?",id:"how-do-carbon-generics-differ-from-templates",level:3},{value:"What is Carbon&#39;s memory model?",id:"what-is-carbons-memory-model",level:3},{value:"How will Carbon achieve memory safety?",id:"how-will-carbon-achieve-memory-safety",level:3},{value:"How will the Carbon <em>project</em> work?",id:"how-will-the-carbon-project-work",level:2},{value:"Where does development occur?",id:"where-does-development-occur",level:3},{value:"How does Carbon make decisions?",id:"how-does-carbon-make-decisions",level:3},{value:"What happens when a decision was wrong?",id:"what-happens-when-a-decision-was-wrong",level:3},{value:"What license does Carbon use?",id:"what-license-does-carbon-use",level:3},{value:"Why make Carbon open source?",id:"why-make-carbon-open-source",level:3},{value:"Why does Carbon have a CLA?",id:"why-does-carbon-have-a-cla",level:3},{value:"Who pays for Carbon&#39;s infrastructure?",id:"who-pays-for-carbons-infrastructure",level:3}],p={toc:c};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"project-faq"},"Project FAQ"),(0,r.kt)("h2",{id:"table-of-contents"},"Table of contents"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#what-is-carbon"},"What is Carbon?")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#what-is-carbons-status"},"What is Carbon's status?"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#how-soon-can-we-use-carbon"},"How soon can we use Carbon?")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#why-make-carbon-public-while-its-still-an-experiment"},"Why make Carbon public while it's still an experiment?")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#how-complete-is-carbons-design"},"How complete is Carbon's design?")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#how-many-people-are-involved-in-carbon"},"How many people are involved in Carbon?")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#is-there-a-demo"},"Is there a demo?")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#why-build-carbon"},"Why build Carbon?"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#why-is-performance-critical"},"Why is performance critical?")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#what-level-of-c-interoperability-is-expected"},"What level of C++ interoperability is expected?")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#what-would-migrating-c-code-to-carbon-look-like"},"What would migrating C++ code to Carbon look like?")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#what-alternatives-did-you-consider-why-did-they-not-work"},"What alternatives did you consider? Why did they not work?"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#why-not-improve-c"},"Why not improve C++?")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#why-not-fork-c"},"Why not fork C++?")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#why-not-rust"},"Why not Rust?"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#if-you-can-use-rust-ignore-carbon"},"If you can use Rust, ignore Carbon")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#why-is-adopting-rust-difficult-for-c-codebases"},"Why is adopting Rust difficult for C++ codebases?")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#why-not-a-garbage-collected-language-like-java-kotlin-or-go"},"Why not a garbage collected language, like Java, Kotlin, or Go?")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#how-will-carbon-work"},"How will Carbon work?"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#what-compiler-infrastructure-is-carbon-using"},"What compiler infrastructure is Carbon using?")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#how-will-carbons-bidirectional-c-interoperability-work"},"How will Carbon's bidirectional C++ interoperability work?")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#how-do-carbon-generics-differ-from-templates"},"How do Carbon generics differ from templates?")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#what-is-carbons-memory-model"},"What is Carbon's memory model?")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#how-will-carbon-achieve-memory-safety"},"How will Carbon achieve memory safety?")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#how-will-the-carbon-_project_-work"},"How will the Carbon ",(0,r.kt)("em",{parentName:"a"},"project")," work?"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#where-does-development-occur"},"Where does development occur?")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#how-does-carbon-make-decisions"},"How does Carbon make decisions?")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#what-happens-when-a-decision-was-wrong"},"What happens when a decision was wrong?")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#what-license-does-carbon-use"},"What license does Carbon use?")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#why-make-carbon-open-source"},"Why make Carbon open source?")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#why-does-carbon-have-a-cla"},"Why does Carbon have a CLA?")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#who-pays-for-carbons-infrastructure"},"Who pays for Carbon's infrastructure?"))))),(0,r.kt)("h2",{id:"what-is-carbon"},"What is Carbon?"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/project/"},"Carbon Language")," is an experimental successor to C++. It is an\neffort to explore a possible future direction for the C++ language given the\n",(0,r.kt)("a",{parentName:"p",href:"/project/difficulties_improving_cpp"},"difficulties improving C++"),"."),(0,r.kt)("h2",{id:"what-is-carbons-status"},"What is Carbon's status?"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/project/#project-status"},"Carbon is still an experiment.")," There remain\nsignificant open questions that we need to answer before the project can\nconsider becoming a production effort. For now, we're focused on exploring this\ndirection and gaining information to begin answering these questions."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/project/#project-status"},"Project status")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/project/roadmap"},"Roadmap"))),(0,r.kt)("h3",{id:"how-soon-can-we-use-carbon"},"How soon can we use Carbon?"),(0,r.kt)("p",null,"Carbon is still years away \u2014 even if the experiment succeeds, it's unlikely that\nit will be ready for serious or production use in the next few years. Everything\nhere is part of a long-term investigation."),(0,r.kt)("h3",{id:"why-make-carbon-public-while-its-still-an-experiment"},"Why make Carbon public while it's still an experiment?"),(0,r.kt)("p",null,"One of the critical questions we need to answer as part of this experiment is\nwhether the direction we're exploring with Carbon has both broad and significant\ninterest for the industry at large. We feel like this is best answered by\ndeveloping the language openly, publicly, and with broad participation."),(0,r.kt)("h3",{id:"how-complete-is-carbons-design"},"How complete is Carbon's design?"),(0,r.kt)("p",null,"We've resolved several of the most challenging language design technical\ndecisions we anticipated based on experience with C++ and its constraints,\nparticularly around generics and inheritance. Beyond those two areas, we have\ninitial designs for class types, inheritance, operator overloading, syntactic\nand lexical structure, and modular code organization. We are aiming to complete\nthe initial 0.1 language design around the end of 2022 although there are a\nlarge number of variables in that timeline. See our ",(0,r.kt)("a",{parentName:"p",href:"/project/roadmap"},"roadmap")," for\ndetails."),(0,r.kt)("p",null,"References:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/design"},"Carbon design overview")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#how-do-carbon-generics-differ-from-templates"},"How do Carbon generics differ from templates?")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/project/roadmap"},"Roadmap"))),(0,r.kt)("h3",{id:"how-many-people-are-involved-in-carbon"},"How many people are involved in Carbon?"),(0,r.kt)("p",null,"Prior to going public, Carbon has had a couple dozen people involved.\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/carbon-language/carbon-lang/pulse/monthly"},"GitHub Insights"),"\nprovides activity metrics."),(0,r.kt)("h3",{id:"is-there-a-demo"},"Is there a demo?"),(0,r.kt)("p",null,"Yes! A prototype interpreter demo ",(0,r.kt)("inlineCode",{parentName:"p"},"explorer")," can be used to execute simple\nexamples. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ bazel run //explorer -- ./explorer/testdata/basic_syntax/print.carbon\n")),(0,r.kt)("p",null,"Example source files can be found under\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/explorer/testdata"},"/explorer/testdata"),"."),(0,r.kt)("p",null,"Carbon can also be explored interactively on\n",(0,r.kt)("a",{parentName:"p",href:"https://carbon.compiler-explorer.com/"},"https://carbon.compiler-explorer.com"),"."),(0,r.kt)("h2",{id:"why-build-carbon"},"Why build Carbon?"),(0,r.kt)("p",null,"See the ",(0,r.kt)("a",{parentName:"p",href:"#why-build-carbon"},"project README")," for an overview of the motivation\nfor Carbon. This section dives into specific questions in that space."),(0,r.kt)("h3",{id:"why-is-performance-critical"},"Why is performance critical?"),(0,r.kt)("p",null,"Performance is critical for many users today. A few reasons are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Cost savings"),": Organizations with large-scale compute needs\n",(0,r.kt)("a",{parentName:"li",href:"https://www.microsoft.com/en-us/research/publication/theres-plenty-of-room-at-the-top/"},"care about software performance"),"\nbecause it reduces hardware needs."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Reliable latency"),": Environments with specific latency needs or\n",(0,r.kt)("a",{parentName:"li",href:"https://research.google/pubs/pub40801/"},"concerns with bounding tail latency"),"\nneed to be able to control and improve their latency."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Resource constraints"),": Many systems have constrained CPU or memory\nresources that require precise control over resource usage and performance.")),(0,r.kt)("h3",{id:"what-level-of-c-interoperability-is-expected"},"What level of C++ interoperability is expected?"),(0,r.kt)("p",null,"Carbon code will be able to call C++, and the other way around, without\noverhead. You will be able to migrate a single library to Carbon within a C++\napplication, or write new Carbon on top of your existing C++ investment."),(0,r.kt)("p",null,"While Carbon's interoperability may not cover every last case, most C++ style\nguides (such as the C++ Core Guidelines or Google C++ Style Guide) steer\ndevelopers away from complex C++ code that's more likely to cause issues, and we\nexpect the vast majority of code to interoperate well."),(0,r.kt)("p",null,"For example, considering a pure C++ application:"),(0,r.kt)("a",{href:"/docs/images/snippets.md#c"},(0,r.kt)("img",{src:"/docs/images/cpp_snippet.svg",width:"600",alt:"A snippet of C++ code. Follow the link to read it."})),(0,r.kt)("p",null,"It's possible to migrate a single function to Carbon:"),(0,r.kt)("a",{href:"/docs/images/snippets.md#mixed"},(0,r.kt)("img",{src:"/docs/images/mixed_snippet.svg",width:"600",alt:"A snippet of mixed Carbon and C++ code. Follow the link to read it."})),(0,r.kt)("p",null,"References:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/design/interoperability/philosophy_and_goals"},"Interoperability philosophy and goals")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#how-will-carbons-bidirectional-c-interoperability-work"},"How will Carbon's bidirectional C++ interoperability work?"))),(0,r.kt)("h3",{id:"what-would-migrating-c-code-to-carbon-look-like"},"What would migrating C++ code to Carbon look like?"),(0,r.kt)("p",null,"Migration support is a\n",(0,r.kt)("a",{parentName:"p",href:"/project/goals#interoperability-with-and-migration-from-existing-c-code"},"key long-term goal for Carbon"),"."),(0,r.kt)("p",null,"If a migration occurs, we anticipate:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Migration tools that automatically translate C++ libraries to Carbon at the\nfile or library level with minimal human assistance."),(0,r.kt)("li",{parentName:"ul"},"Bidirectional C++ interoperability that allows teams to migrate libraries in\nany order they choose without performance concerns or maintaining\ninteroperability wrappers."),(0,r.kt)("li",{parentName:"ul"},"Test-driven verification that migrations are correct.")),(0,r.kt)("h2",{id:"what-alternatives-did-you-consider-why-did-they-not-work"},"What alternatives did you consider? Why did they not work?"),(0,r.kt)("h3",{id:"why-not-improve-c"},"Why not improve C++?"),(0,r.kt)("p",null,"A lot of effort has been invested into improving C++, but\n",(0,r.kt)("a",{parentName:"p",href:"/project/difficulties_improving_cpp"},"C++ is difficult to improve"),"."),(0,r.kt)("p",null,"For example, although ",(0,r.kt)("a",{parentName:"p",href:"https://wg21.link/p2137r0"},"P2137")," was not accepted, it\nformed the basis for ",(0,r.kt)("a",{parentName:"p",href:"/project/goals"},"Carbon's goals"),"."),(0,r.kt)("h3",{id:"why-not-fork-c"},"Why not fork C++?"),(0,r.kt)("p",null,"While we would like to see C++ improve, we don't think that forking C++ is the\nright path to achieving that goal. A fork could create confusion about what code\nworks with standard C++. We believe a ",(0,r.kt)("em",{parentName:"p"},"successor")," programming language is a\nbetter approach because it gives more freedom for Carbon's design while\nretaining the existing C++ ecosystem investments."),(0,r.kt)("h3",{id:"why-not-rust"},"Why not Rust?"),(0,r.kt)("h4",{id:"if-you-can-use-rust-ignore-carbon"},"If you can use Rust, ignore Carbon"),(0,r.kt)("p",null,"If you want to use Rust, and it is technically and economically viable for your\nproject, you should use Rust. In fact, if you can use Rust or any other\nestablished programming language, you should. Carbon is for organizations and\nprojects that heavily depend on C++; for example, projects that have a lot of\nC++ code or use many third-party C++ libraries."),(0,r.kt)("p",null,"We believe that Rust is an excellent choice for writing software within the pure\nRust ecosystem. Software written in Rust has properties that neither C++ nor\nCarbon have. When you need to call other languages from Rust, RPCs are a good\noption. Rust is also good for using APIs implemented in a different language\nin-process, when the cost of maintaining the FFI boundary is reasonable."),(0,r.kt)("p",null,"When the foreign language API is large, constantly changes, uses advanced C++\nfeatures, or\n",(0,r.kt)("a",{parentName:"p",href:"#why-is-adopting-rust-difficult-for-c-codebases"},"makes architectural choices that are incompatible with safe Rust"),",\nmaintaining a C++/Rust FFI may not be economically viable today (but it is an\narea of active research: ",(0,r.kt)("a",{parentName:"p",href:"https://crates.io/crates/cxx"},"cxx"),",\n",(0,r.kt)("a",{parentName:"p",href:"https://crates.io/crates/autocxx"},"autocxx"),",\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/google/crubit/blob/main/docs/design.md"},"Crubit"),")."),(0,r.kt)("p",null,"The Carbon community is looking for a language that existing, large, monolithic\nC++ codebases can incrementally adopt and have a prospect of migrating away from\nC++ completely. We would be very happy if Rust could be this language. However,\nwe are not certain that:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Idiomatic, safe Rust can seamlessly integrate into an existing C++ codebase,\nsimilarly to how TypeScript code can be added to a large existing JavaScript\ncodebase."),(0,r.kt)("li",{parentName:"ul"},"Developers can incrementally migrate existing C++ code to Rust, just like\nthey can migrate JavaScript to TypeScript one file at a time, while keeping\nthe project working.")),(0,r.kt)("p",null,"See\n",(0,r.kt)("a",{parentName:"p",href:"/project/goals#interoperability-with-and-migration-from-existing-c-code"},"Carbon's goals"),"\nfor an in-depth discussion of Carbon's vision for C++/Carbon interop and\nmigration."),(0,r.kt)("h4",{id:"why-is-adopting-rust-difficult-for-c-codebases"},"Why is adopting Rust difficult for C++ codebases?"),(0,r.kt)("p",null,"Large existing C++ codebases almost certainly made architectural choices that\nare incompatible with safe Rust. Specifically:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Seamless interop where existing, unmodified ",(0,r.kt)("strong",{parentName:"li"},"C++ APIs are made callable\nfrom safe Rust")," requires the C++ code to follow borrow checking rules at\nthe API boundary.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"To reduce the amount of Rust-side compile-time checking that makes\ninterop difficult, C++ APIs can be exposed to Rust with pointers instead\nof references. However, that forces users to write ",(0,r.kt)("em",{parentName:"li"},"unsafe")," Rust, which\ncan be even more tricky to write than C++ because it has new kinds of UB\ncompared to C++; for example,\n",(0,r.kt)("a",{parentName:"li",href:"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md"},"stacked borrows violations"),"."))),(0,r.kt)("li",{parentName:"ul"},"Seamless interop where ",(0,r.kt)("strong",{parentName:"li"},"safe Rust APIs are made callable from C++"),"\nrequires C++ users to follow Rust borrow checking rules."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Incremental migration of C++ to safe Rust")," means that C++ code gets\nconverted to Rust without major changes to the architecture, data\nstructures, or APIs. However Rust imposes stricter rules than C++,\ndisallowing some design choices that were valid in C++. Therefore, the\noriginal C++ code must follow Rust rules before attempting a conversion.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Original C++ code must be structured in such a way that the resulting\nRust code passes borrow checking. C++ APIs and data structures are not\ndesigned with this in mind."),(0,r.kt)("li",{parentName:"ul"},"Migrating C++ to ",(0,r.kt)("em",{parentName:"li"},"unsafe")," Rust would still require the code to follow\nRust's\n",(0,r.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html#the-rules-of-references"},"reference exclusivity"),"\nand stacked borrows rules.")))),(0,r.kt)("h3",{id:"why-not-a-garbage-collected-language-like-java-kotlin-or-go"},"Why not a garbage collected language, like Java, Kotlin, or Go?"),(0,r.kt)("p",null,"If you can use one of these languages, you absolutely should."),(0,r.kt)("p",null,"Garbage collection provides dramatically simpler memory management for\ndevelopers, but at the expense of performance. The performance cost can range\nfrom direct runtime overhead to significant complexity and loss of ",(0,r.kt)("em",{parentName:"p"},"control"),"\nover performance. This trade-off makes sense for many applications, and we\nactively encourage using these languages in those cases. However, we need a\nsolution for C++ use-cases that require its full performance, low-level control,\nand access to hardware."),(0,r.kt)("h2",{id:"how-will-carbon-work"},"How will Carbon work?"),(0,r.kt)("h3",{id:"what-compiler-infrastructure-is-carbon-using"},"What compiler infrastructure is Carbon using?"),(0,r.kt)("p",null,"Carbon is being built using LLVM, and is expected to have Clang dependencies for\n",(0,r.kt)("a",{parentName:"p",href:"#how-will-carbons-bidirectional-c-interoperability-work"},"interoperability"),"."),(0,r.kt)("h3",{id:"how-will-carbons-bidirectional-c-interoperability-work"},"How will Carbon's bidirectional C++ interoperability work?"),(0,r.kt)("p",null,"The Carbon toolchain will compile both Carbon and C++ code together, in order to\nmake the interoperability\n",(0,r.kt)("a",{parentName:"p",href:"#what-level-of-c-interoperability-is-expected"},"seamless"),"."),(0,r.kt)("p",null,"For example, for ",(0,r.kt)("inlineCode",{parentName:"p"},'import Cpp library "<vector>"'),", Carbon will:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Call into Clang to load the AST of the ",(0,r.kt)("inlineCode",{parentName:"li"},"vector")," header file."),(0,r.kt)("li",{parentName:"ul"},"Analyze the AST for public APIs, which will be turned into names that can be\naccessed from Carbon; for example, ",(0,r.kt)("inlineCode",{parentName:"li"},"std::vector")," is ",(0,r.kt)("inlineCode",{parentName:"li"},"Cpp.std.vector")," in\nCarbon."),(0,r.kt)("li",{parentName:"ul"},"Use Clang to instantiate the ",(0,r.kt)("inlineCode",{parentName:"li"},"Cpp.std.vector")," template when parameterized\nreferences occur in Carbon code.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"In other words, C++ templates will be instantiated using standard C++\nmechanisms, and the instantiated versions are called by Carbon code.")))),(0,r.kt)("p",null,"Some code, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"#define")," preprocessor macros, will not work as well. C++\nallows arbitrary content in a ",(0,r.kt)("inlineCode",{parentName:"p"},"#define"),", and that can be difficult to translate.\nAs a consequence, this is likely to be a limitation of interoperability and left\nto migration."),(0,r.kt)("h3",{id:"how-do-carbon-generics-differ-from-templates"},"How do Carbon generics differ from templates?"),(0,r.kt)("p",null,"Carbon's\n",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Generic_programming"},"generic programming")," support\nwill handle both templates (matching C++) and checked generics (common in other\nlanguages: Rust, Swift, Go, Kotlin, Java, and so on)."),(0,r.kt)("p",null,"The key difference between the two is that template arguments can only finish\ntype-checking ",(0,r.kt)("em",{parentName:"p"},"during")," instantiation, whereas generics specify an interface with\nwhich arguments can finish type-checking ",(0,r.kt)("em",{parentName:"p"},"without")," instantiation. This has a\ncouple of important benefits:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type-checking errors for generics happen earlier, making it easier for the\ncompiler to produce helpful diagnostics."),(0,r.kt)("li",{parentName:"ul"},"Generic functions can generate less compiled output, allowing compilation\nwith many uses to be faster.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"For comparison, template instantiations are a major factor for C++\ncompilation latency.")))),(0,r.kt)("p",null,"Although Carbon will prefer generics over templates, templates are provided for\nmigration of C++ code."),(0,r.kt)("p",null,"References:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/design/generics/goals#better-compiler-experience"},"Generics: Goals: Better compiler experience")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/design/generics/terminology#generic-versus-template-parameters"},"Generics: Terminology: Generic versus template parameters"))),(0,r.kt)("h3",{id:"what-is-carbons-memory-model"},"What is Carbon's memory model?"),(0,r.kt)("p",null,"Carbon will match C++'s memory model closely in order to maintain zero-overhead\ninteroperability. There may be some changes made as part of supporting memory\nsafety, but performance and interoperability will constrain flexibility in this\nspace."),(0,r.kt)("h3",{id:"how-will-carbon-achieve-memory-safety"},"How will Carbon achieve memory safety?"),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"/project/#memory-safety"},"memory safety in the project README"),"."),(0,r.kt)("p",null,"References:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://discourse.llvm.org/t/rfc-lifetime-annotations-for-c/61377"},"Lifetime annotations for C++")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/project/principles/safety_strategy"},"Carbon principle: Safety strategy"))),(0,r.kt)("h2",{id:"how-will-the-carbon-project-work"},"How will the Carbon ",(0,r.kt)("em",{parentName:"h2"},"project")," work?"),(0,r.kt)("h3",{id:"where-does-development-occur"},"Where does development occur?"),(0,r.kt)("p",null,"Carbon is using GitHub for its repository and code reviews. Most non-review\ndiscussion occurs on our ",(0,r.kt)("a",{parentName:"p",href:"https://discord.gg/ZjVdShJDAs"},"Discord server"),"."),(0,r.kt)("p",null,"If you're interested in contributing, you can find more information in our\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/CONTRIBUTING.md"},"Contributing file"),"."),(0,r.kt)("h3",{id:"how-does-carbon-make-decisions"},"How does Carbon make decisions?"),(0,r.kt)("p",null,"Any interested developer may ",(0,r.kt)("a",{parentName:"p",href:"/project/evolution"},"propose and discuss changes")," to\nCarbon. The ",(0,r.kt)("a",{parentName:"p",href:"/project/groups#carbon-leads"},"Carbon leads")," are responsible for reviewing\nproposals and surrounding discussion, then making decisions based on the\ndiscussion. As Carbon grows, we expect to add feature teams to distribute\nresponsibility."),(0,r.kt)("p",null,"The intent of this setup is that Carbon remains a community-driven project,\navoiding situations where any single organization controls Carbon's direction."),(0,r.kt)("p",null,"References:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/CONTRIBUTING.md"},"Contributing")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/project/evolution"},"Evolution process"))),(0,r.kt)("h3",{id:"what-happens-when-a-decision-was-wrong"},"What happens when a decision was wrong?"),(0,r.kt)("p",null,"Carbon's ",(0,r.kt)("a",{parentName:"p",href:"/project/evolution"},"evolution process")," is iterative: when we make poor\ndecisions, we'll work to fix them. If we realize a mistake quickly, it may make\nsense to just roll back the decision. Otherwise, a fix will need to follow the\nnormal evolution process, with a proposal explaining why the decision was wrong\nand proposing a better path forward."),(0,r.kt)("h3",{id:"what-license-does-carbon-use"},"What license does Carbon use?"),(0,r.kt)("p",null,"Carbon is under the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/LICENSE"},"Apache License v2.0 with LLVM Exceptions"),". We\nwant Carbon to be available under a permissive open source license. As a\nprogramming language with compiler and runtime library considerations, our\nproject has the same core needs as the LLVM project for its license and we build\non their work to address these by combining the\n",(0,r.kt)("a",{parentName:"p",href:"https://spdx.org/licenses/Apache-2.0.html"},"Apache License")," with the\n",(0,r.kt)("a",{parentName:"p",href:"https://spdx.org/licenses/LLVM-exception.html"},"LLVM Exceptions"),"."),(0,r.kt)("h3",{id:"why-make-carbon-open-source"},"Why make Carbon open source?"),(0,r.kt)("p",null,"We believe it is important for a programming language like Carbon, if it is\nsuccessful, to be developed by and for a broad community. We feel that the open\nsource model is the most effective and successful approach for doing this. We're\nclosely modeled on LLVM and other similar open source projects, and want to\nfollow their good examples. We've structured the project to be attractive for\nindustry players big and small to participate in, but also to be resilient and\nindependent long-term."),(0,r.kt)("p",null,"The open source model, particularly as followed by Apache and LLVM, also\nprovides a strong foundation for handling hard problems like intellectual\nproperty and licensing with a broad and diverse group of contributors."),(0,r.kt)("h3",{id:"why-does-carbon-have-a-cla"},"Why does Carbon have a CLA?"),(0,r.kt)("p",null,"Carbon ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/CONTRIBUTING.md#contributor-license-agreements-clas"},"uses a CLA"),"\n(Contributor License Agreement) in case we need to fix issues with the license\nstructure in the future, something which has proven to be important in other\nprojects."),(0,r.kt)("p",null,"Any changes to the license of Carbon would be made very carefully and subject to\nthe exact same decision making process as any other change to the overall\nproject direction."),(0,r.kt)("p",null,"Initially, Carbon is bootstrapping using Google's CLA. We are planning to create\nan open source foundation and transfer all Carbon-related rights to it; our goal\nis for the foundation setup to be similar to other open source projects, such as\nLLVM or Kubernetes."),(0,r.kt)("h3",{id:"who-pays-for-carbons-infrastructure"},"Who pays for Carbon's infrastructure?"),(0,r.kt)("p",null,"Carbon is currently bootstrapping infrastructure with the help of Google. As\nsoon as a foundation is ready to oversee infrastructure, such as\n",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Continuous_integration"},"continuous integration"),"\nand the CLA, we plan to transfer them so they are run by the community."))}u.isMDXComponent=!0}}]);