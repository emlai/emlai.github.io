"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8535],{3905:(e,a,t)=>{t.d(a,{Zo:()=>m,kt:()=>u});var n=t(7294);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function r(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,i=function(e,a){if(null==e)return{};var t,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(i[t]=e[t]);return i}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=n.createContext({}),s=function(e){var a=n.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):r(r({},a),e)),t},m=function(e){var a=s(e.components);return n.createElement(p.Provider,{value:a},e.children)},c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},d=n.forwardRef((function(e,a){var t=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=s(t),u=i,k=d["".concat(p,".").concat(u)]||d[u]||c[u]||l;return t?n.createElement(k,r(r({ref:a},m),{},{components:t})):n.createElement(k,r({ref:a},m))}));function u(e,a){var t=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var l=t.length,r=new Array(l);r[0]=d;var o={};for(var p in a)hasOwnProperty.call(a,p)&&(o[p]=a[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var s=2;s<l;s++)r[s]=t[s];return n.createElement.apply(null,r)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7731:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>p,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var n=t(7462),i=(t(7294),t(3905));const l={},r="Code and name organization",o={unversionedId:"code_and_name_organization/README",id:"code_and_name_organization/README",title:"Code and name organization",description:"\x3c!--",source:"@site/../docs/design/code_and_name_organization/README.md",sourceDirName:"code_and_name_organization",slug:"/code_and_name_organization/",permalink:"/design/code_and_name_organization/",draft:!1,editUrl:"https://github.com/carbon-language/carbon-lang/blob/trunk/docs/design/code_and_name_organization/README.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Classes",permalink:"/design/classes"},next:{title:"Source files",permalink:"/design/code_and_name_organization/source_files"}},p={},s=[{value:"Table of contents",id:"table-of-contents",level:2},{value:"Goals and philosophy",id:"goals-and-philosophy",level:2},{value:"Overview",id:"overview",level:2},{value:"Sizing packages and libraries",id:"sizing-packages-and-libraries",level:3},{value:"Imports",id:"imports",level:3},{value:"Details",id:"details",level:2},{value:"Source file introduction",id:"source-file-introduction",level:3},{value:"Name paths",id:"name-paths",level:3},{value:"<code>package</code> directives",id:"package-directives",level:4},{value:"Packages",id:"packages",level:3},{value:"Shorthand notation for libraries in packages",id:"shorthand-notation-for-libraries-in-packages",level:4},{value:"Package name conflicts",id:"package-name-conflicts",level:4},{value:"Libraries",id:"libraries",level:3},{value:"Exporting entities from an API file",id:"exporting-entities-from-an-api-file",level:4},{value:"Granularity of libraries",id:"granularity-of-libraries",level:4},{value:"Exporting namespaces",id:"exporting-namespaces",level:4},{value:"Imports",id:"imports-1",level:3},{value:"Imports from the current package",id:"imports-from-the-current-package",level:4},{value:"Namespaces",id:"namespaces",level:3},{value:"Re-declaring imported namespaces",id:"re-declaring-imported-namespaces",level:4},{value:"Aliasing",id:"aliasing",level:4},{value:"Caveats",id:"caveats",level:2},{value:"Package and library name conflicts",id:"package-and-library-name-conflicts",level:3},{value:"Potential refactorings",id:"potential-refactorings",level:3},{value:"Update imports",id:"update-imports",level:4},{value:"Between <code>api</code> and <code>impl</code> files",id:"between-api-and-impl-files",level:4},{value:"Other refactorings",id:"other-refactorings",level:4},{value:"Preference for few child namespaces",id:"preference-for-few-child-namespaces",level:3},{value:"Redundant markers",id:"redundant-markers",level:3},{value:"Open questions",id:"open-questions",level:2},{value:"Different file extensions",id:"different-file-extensions",level:3},{value:"Imports from other languages",id:"imports-from-other-languages",level:3},{value:"Imports from URLs",id:"imports-from-urls",level:3},{value:"Test file type",id:"test-file-type",level:3},{value:"Alternatives considered",id:"alternatives-considered",level:2},{value:"References",id:"references",level:2}],m={toc:s};function c(e){let{components:a,...t}=e;return(0,i.kt)("wrapper",(0,n.Z)({},m,t,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"code-and-name-organization"},"Code and name organization"),(0,i.kt)("h2",{id:"table-of-contents"},"Table of contents"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#goals-and-philosophy"},"Goals and philosophy")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#overview"},"Overview"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#sizing-packages-and-libraries"},"Sizing packages and libraries")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#imports"},"Imports")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#details"},"Details"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#source-file-introduction"},"Source file introduction")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#name-paths"},"Name paths"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#package-directives"},(0,i.kt)("inlineCode",{parentName:"a"},"package")," directives")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#packages"},"Packages"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#shorthand-notation-for-libraries-in-packages"},"Shorthand notation for libraries in packages")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#package-name-conflicts"},"Package name conflicts")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#libraries"},"Libraries"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#exporting-entities-from-an-api-file"},"Exporting entities from an API file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#granularity-of-libraries"},"Granularity of libraries")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#exporting-namespaces"},"Exporting namespaces")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#imports-1"},"Imports"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#imports-from-the-current-package"},"Imports from the current package")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#namespaces"},"Namespaces"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#re-declaring-imported-namespaces"},"Re-declaring imported namespaces")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#aliasing"},"Aliasing")))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#caveats"},"Caveats"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#package-and-library-name-conflicts"},"Package and library name conflicts")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#potential-refactorings"},"Potential refactorings"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#update-imports"},"Update imports")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#between-api-and-impl-files"},"Between ",(0,i.kt)("inlineCode",{parentName:"a"},"api")," and ",(0,i.kt)("inlineCode",{parentName:"a"},"impl")," files")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#other-refactorings"},"Other refactorings")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#preference-for-few-child-namespaces"},"Preference for few child namespaces")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#redundant-markers"},"Redundant markers")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#open-questions"},"Open questions"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#different-file-extensions"},"Different file extensions")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#imports-from-other-languages"},"Imports from other languages")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#imports-from-urls"},"Imports from URLs")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#test-file-type"},"Test file type")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#alternatives-considered"},"Alternatives considered")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#references"},"References"))),(0,i.kt)("h2",{id:"goals-and-philosophy"},"Goals and philosophy"),(0,i.kt)("p",null,"Important Carbon goals for code and name organization are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"/project/goals#language-tools-and-ecosystem"},"Language tools and ecosystem")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Tooling support is important for Carbon, including the possibility of a\npackage manager.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Developer tooling, including both IDEs and refactoring tools, are\nexpected to exist and be well-supported.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"/project/goals#software-and-language-evolution"},"Software and language evolution"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We should support libraries adding new structs, functions or other\nidentifiers without those new identifiers being able to shadow or break\nexisting users that already have identifiers with conflicting names.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We should make it easy to refactor code, including moving code between\nfiles. This includes refactoring both by humans and by developer\ntooling.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"/project/goals#fast-and-scalable-development"},"Fast and scalable development"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"It should be easy for developer tooling to parse code, without needing\nto parse imports for context.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Structure should be provided for large projects to opt into features\nwhich will help maintain scaling of their codebase, while not adding\nburdens to small projects that don't need it."))))),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"Carbon ",(0,i.kt)("a",{parentName:"p",href:"/design/code_and_name_organization/source_files"},"source files")," have a ",(0,i.kt)("inlineCode",{parentName:"p"},".carbon")," extension, such as\n",(0,i.kt)("inlineCode",{parentName:"p"},"geometry.carbon"),". These files are the basic unit of compilation."),(0,i.kt)("p",null,"Each file begins with a declaration of which\n",(0,i.kt)("em",{parentName:"p"},"package"),(0,i.kt)("sup",null,(0,i.kt)("small",null,"[",(0,i.kt)("a",{parentName:"p",href:"/guides/glossary#package"},"define"),"]")),"\nit belongs in. The package is the unit of ",(0,i.kt)("em",{parentName:"p"},"distribution"),". The package name is a\nsingle identifier, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"Geometry"),". An example API file in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Geometry"),"\npackage would start with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"package Geometry api;\n")),(0,i.kt)("p",null,"A tiny package may consist of a single library with a single file, and not use\nany further features of the ",(0,i.kt)("inlineCode",{parentName:"p"},"package")," keyword."),(0,i.kt)("p",null,"It is often useful to use separate files for the API and its implementation.\nThis may help organize code as a library grows, or to let the build system\ndistinguish between the dependencies of the API itself and its underlying\nimplementation. Implementation files allow for code to be extracted out from the\nAPI file, while only being callable from other files within the library,\nincluding both API and implementation files. Implementation files are marked by\nboth naming the file to use an extension of ",(0,i.kt)("inlineCode",{parentName:"p"},".impl.carbon")," and instead start\nwith:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"package Geometry impl;\n")),(0,i.kt)("p",null,"However, as a package adds more files, it will probably want to separate out\ninto multiple\n",(0,i.kt)("em",{parentName:"p"},"libraries"),(0,i.kt)("sup",null,(0,i.kt)("small",null,"[",(0,i.kt)("a",{parentName:"p",href:"/guides/glossary#library"},"define"),"]")),".\nA library is the basic unit of ",(0,i.kt)("em",{parentName:"p"},"dependency"),". Separating code into multiple\nlibraries can speed up the overall build while also making it clear which code\nis being reused. For example, an API file adding the library ",(0,i.kt)("inlineCode",{parentName:"p"},"Shapes")," to the\n",(0,i.kt)("inlineCode",{parentName:"p"},"Geometry")," package, or ",(0,i.kt)("inlineCode",{parentName:"p"},"Geometry//Shapes")," in\n",(0,i.kt)("a",{parentName:"p",href:"#shorthand-notation-for-libraries-in-packages"},"shorthand"),", would start with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package Geometry library "Shapes" api;\n')),(0,i.kt)("p",null,"As code becomes more complex, and users pull in more code, it may also be\nhelpful to add\n",(0,i.kt)("em",{parentName:"p"},"namespaces"),(0,i.kt)("sup",null,(0,i.kt)("small",null,"[",(0,i.kt)("a",{parentName:"p",href:"/guides/glossary#namespace"},"define"),"]")),"\nto give related entities consistently structured names. A namespace affects the\n",(0,i.kt)("em",{parentName:"p"},"name\npath"),(0,i.kt)("sup",null,(0,i.kt)("small",null,"[",(0,i.kt)("a",{parentName:"p",href:"/guides/glossary#name-path"},"define"),"]")),"\nused when calling code. For example, with no namespace, if a ",(0,i.kt)("inlineCode",{parentName:"p"},"Geometry")," package\ndefines ",(0,i.kt)("inlineCode",{parentName:"p"},"Circle")," then the name path will be ",(0,i.kt)("inlineCode",{parentName:"p"},"Geometry.Circle"),". However, it can\nbe named ",(0,i.kt)("inlineCode",{parentName:"p"},"Geometry.TwoDimensional.Circle")," with a ",(0,i.kt)("inlineCode",{parentName:"p"},"namespace"),"; for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package Geometry library "Shapes" api;\nnamespace TwoDimensional;\nstruct TwoDimensional.Circle { ... };\n')),(0,i.kt)("p",null,"This scaling of packages into libraries and namespaces is how Carbon supports\nboth small and large codebases."),(0,i.kt)("h3",{id:"sizing-packages-and-libraries"},"Sizing packages and libraries"),(0,i.kt)("p",null,"A different way to think of the sizing of packages and libraries is:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A package is a GitHub repository.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Small and medium projects that fit in a single repository will typically\nhave a single package. For example, a medium-sized project like\n",(0,i.kt)("a",{parentName:"li",href:"https://github.com/abseil/abseil-cpp/tree/master/absl"},"Abseil")," could\nstill use a single ",(0,i.kt)("inlineCode",{parentName:"li"},"Abseil")," package."),(0,i.kt)("li",{parentName:"ul"},"Large projects will have multiple packages. For example, Mozilla may\nhave multiple packages for Firefox and other efforts."))),(0,i.kt)("li",{parentName:"ul"},"A library is a few files that provide an interface and implementation, and\nshould remain small.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Small projects will have a single library when it's easy to maintain all\ncode in a few files."),(0,i.kt)("li",{parentName:"ul"},"Medium and large projects will have multiple libraries. For example,\n",(0,i.kt)("a",{parentName:"li",href:"https://github.com/boostorg/geometry/blob/develop/include/boost/geometry/algorithms/detail/distance/interface.hpp"},"Boost Geometry's Distance"),"\ninterface and implementation might be its own library within ",(0,i.kt)("inlineCode",{parentName:"li"},"Boost"),",\nwith dependencies on other libraries in ",(0,i.kt)("inlineCode",{parentName:"li"},"Boost")," and potentially other\npackages from Boost.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Library names could be named after the feature, such as\n",(0,i.kt)("inlineCode",{parentName:"li"},'library "Algorithms"'),", or include part of the path to reduce the\nchance of name collisions, such as ",(0,i.kt)("inlineCode",{parentName:"li"},'library "Geometry/Algorithms"'),".")))))),(0,i.kt)("p",null,"Packages may choose to expose libraries that expose unions of interfaces from\nother libraries within the package. However, doing so would also provide the\ntransitive closure of build-time dependencies, and is likely to be discouraged\nin many cases."),(0,i.kt)("h3",{id:"imports"},"Imports"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"import")," keyword supports reusing code from other files and libraries."),(0,i.kt)("p",null,"For example, to use ",(0,i.kt)("inlineCode",{parentName:"p"},"Geometry.Circle")," from the ",(0,i.kt)("inlineCode",{parentName:"p"},"Geometry//Shapes")," library:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-carbon"},'import Geometry library "Shapes";\n\nfn Area(circle: Geometry.Circle) { ... };\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"library")," keyword is optional for ",(0,i.kt)("inlineCode",{parentName:"p"},"import"),", and its use should parallel that\nof ",(0,i.kt)("inlineCode",{parentName:"p"},"library")," on the ",(0,i.kt)("inlineCode",{parentName:"p"},"package")," of the code being imported."),(0,i.kt)("h2",{id:"details"},"Details"),(0,i.kt)("h3",{id:"source-file-introduction"},"Source file introduction"),(0,i.kt)("p",null,"Every source file will consist of, in order:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"One ",(0,i.kt)("inlineCode",{parentName:"li"},"package")," directive."),(0,i.kt)("li",{parentName:"ol"},"A section of zero or more ",(0,i.kt)("inlineCode",{parentName:"li"},"import")," directives."),(0,i.kt)("li",{parentName:"ol"},"Source file body, with other code.")),(0,i.kt)("p",null,"Comments and blank lines may be intermingled with these sections.\n",(0,i.kt)("a",{parentName:"p",href:"/design/metaprogramming"},"Metaprogramming")," code may also be\nintermingled, so long as the outputted code is consistent with the enforced\nordering. Other types of code must be in the source file body."),(0,i.kt)("h3",{id:"name-paths"},"Name paths"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"#name-paths"},"Name paths")," are defined above as sequences of identifiers\nseparated by dots. This syntax may be loosely expressed as a regular expression:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-regex"},"IDENTIFIER(\\.IDENTIFIER)*\n")),(0,i.kt)("p",null,"Name conflicts are addressed by ",(0,i.kt)("a",{parentName:"p",href:"/design/name_lookup"},"name lookup"),"."),(0,i.kt)("h4",{id:"package-directives"},(0,i.kt)("inlineCode",{parentName:"h4"},"package")," directives"),(0,i.kt)("h3",{id:"packages"},"Packages"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"package")," directive's syntax may be loosely expressed as a regular\nexpression:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-regex"},"package IDENTIFIER (library STRING)? (api|impl);\n")),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-carbon"},'package Geometry library "Objects/FourSides" api;\n')),(0,i.kt)("p",null,"Breaking this apart:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The identifier passed to the ",(0,i.kt)("inlineCode",{parentName:"li"},"package")," keyword, ",(0,i.kt)("inlineCode",{parentName:"li"},"Geometry"),", is the package\nname and will prefix both library and namespace paths.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"package")," keyword also declares a package entity matching the\npackage name. A package entity is almost identical to a namespace\nentity, except with some package/import-specific handling. In other\nwords, if the file declares ",(0,i.kt)("inlineCode",{parentName:"li"},"struct Line"),", that may be used from within\nthe file as both ",(0,i.kt)("inlineCode",{parentName:"li"},"Line")," directly and ",(0,i.kt)("inlineCode",{parentName:"li"},"Geometry.TwoDimensional.Line"),"\nusing the ",(0,i.kt)("inlineCode",{parentName:"li"},"Geometry")," package entity created by the ",(0,i.kt)("inlineCode",{parentName:"li"},"package")," keyword."))),(0,i.kt)("li",{parentName:"ul"},"When the optional ",(0,i.kt)("inlineCode",{parentName:"li"},"library")," keyword is specified, sets the name of the\nlibrary within the package. In this example, the\n",(0,i.kt)("inlineCode",{parentName:"li"},"Geometry//Objects/FourSides")," library will be used."),(0,i.kt)("li",{parentName:"ul"},"The use of the ",(0,i.kt)("inlineCode",{parentName:"li"},"api")," keyword indicates this is an API files as described\nunder ",(0,i.kt)("a",{parentName:"li",href:"#libraries"},"libraries"),". If it instead had ",(0,i.kt)("inlineCode",{parentName:"li"},"impl"),", this would be an\nimplementation file.")),(0,i.kt)("p",null,"Because every file must have exactly one ",(0,i.kt)("inlineCode",{parentName:"p"},"package")," directive, there are a couple\nimportant and deliberate side-effects:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Every file will be in precisely one library.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"A library still exists even when there is no explicit library argument,\nsuch as ",(0,i.kt)("inlineCode",{parentName:"li"},"package Geometry api;"),". This could be considered equivalent to\n",(0,i.kt)("inlineCode",{parentName:"li"},'package Geometry library "" api;'),", although we should not allow that\nspecific syntax as error-prone."))),(0,i.kt)("li",{parentName:"ul"},'Every entity in Carbon will be in a namespace, even if its namespace path\nconsists of only the package name. There is no "global" namespace.',(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Every entity in a file will be defined within the namespace described in\nthe ",(0,i.kt)("inlineCode",{parentName:"li"},"package")," directive."),(0,i.kt)("li",{parentName:"ul"},"Entities within a file may be defined in\n",(0,i.kt)("a",{parentName:"li",href:"#namespaces"},"child namespaces"),".")))),(0,i.kt)("p",null,"Files contributing to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Geometry//Objects/FourSides")," library must all start\nwith ",(0,i.kt)("inlineCode",{parentName:"p"},'package Geometry library "Objects/FourSides"'),", but will differ on\n",(0,i.kt)("inlineCode",{parentName:"p"},"api"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"impl")," types."),(0,i.kt)("h4",{id:"shorthand-notation-for-libraries-in-packages"},"Shorthand notation for libraries in packages"),(0,i.kt)("p",null,"Library names may also be referred to as ",(0,i.kt)("inlineCode",{parentName:"p"},"PACKAGE//LIBRARY")," as shorthand in\ntext. ",(0,i.kt)("inlineCode",{parentName:"p"},"PACKAGE//default")," will refer to the name of the library used when no\n",(0,i.kt)("inlineCode",{parentName:"p"},"library")," argument is specified, although ",(0,i.kt)("inlineCode",{parentName:"p"},"PACKAGE")," may also be used in\nsituations where it is unambiguous that it still refers to the default library."),(0,i.kt)("p",null,"It's recommended that libraries use a single ",(0,i.kt)("inlineCode",{parentName:"p"},"/")," for separators where desired,\nin order to distinguish between the ",(0,i.kt)("inlineCode",{parentName:"p"},"//")," of the package and ",(0,i.kt)("inlineCode",{parentName:"p"},"/")," separating\nlibrary segments. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"Geometry//Objects/FourSides")," uses a single ",(0,i.kt)("inlineCode",{parentName:"p"},"/"),"\nto separate the ",(0,i.kt)("inlineCode",{parentName:"p"},"Object/FourSides")," library name."),(0,i.kt)("h4",{id:"package-name-conflicts"},"Package name conflicts"),(0,i.kt)("p",null,"Because the package also declares a namespace entity with the same name,\nconflicts with the package name are possible. We do not support packages\nproviding entities with the same name as the package."),(0,i.kt)("p",null,"For example, this is a conflict for ",(0,i.kt)("inlineCode",{parentName:"p"},"DateTime"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-carbon"},"package DateTime api;\n\nstruct DateTime { ... };\n")),(0,i.kt)("p",null,"This declaration is important for ",(0,i.kt)("a",{parentName:"p",href:"#libraries"},"implementation files"),", which\nimplicitly import the library's API, because it keeps the package name as an\nexplicit entity in source files."),(0,i.kt)("p",null,"Note that ",(0,i.kt)("a",{parentName:"p",href:"#package-and-library-name-conflicts"},"imported name conflicts")," are\nhandled differently."),(0,i.kt)("h3",{id:"libraries"},"Libraries"),(0,i.kt)("p",null,"Every Carbon library consists of one or more files. Each Carbon library has a\nprimary file that defines its API, and may optionally contain additional files\nthat are implementation."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"An API file's ",(0,i.kt)("inlineCode",{parentName:"li"},"package")," directive will have ",(0,i.kt)("inlineCode",{parentName:"li"},"api"),". For example,\n",(0,i.kt)("inlineCode",{parentName:"li"},'package Geometry library "Shapes" api;'),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"API filenames must have the ",(0,i.kt)("inlineCode",{parentName:"li"},".carbon")," extension. They must not have a\n",(0,i.kt)("inlineCode",{parentName:"li"},".impl.carbon")," extension."),(0,i.kt)("li",{parentName:"ul"},"API file paths will correspond to the library name.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},'The precise form of this correspondence is undetermined, but should\nbe expected to be similar to a "Math/Algebra" library being in a\n"Math/Algebra.carbon" file path.'),(0,i.kt)("li",{parentName:"ul"},"The package will not be used when considering the file path."))))),(0,i.kt)("li",{parentName:"ul"},"An implementation file's ",(0,i.kt)("inlineCode",{parentName:"li"},"package")," directive will have ",(0,i.kt)("inlineCode",{parentName:"li"},"impl"),". For example,\n",(0,i.kt)("inlineCode",{parentName:"li"},'package Geometry library "Shapes" impl;'),".",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Implementation filenames must have the ",(0,i.kt)("inlineCode",{parentName:"li"},".impl.carbon")," extension."),(0,i.kt)("li",{parentName:"ul"},"Implementation file paths need not correspond to the library name."),(0,i.kt)("li",{parentName:"ul"},"Implementation files implicitly import the library's API. Implementation\nfiles cannot import each other. There is no facility for file or\nnon-",(0,i.kt)("inlineCode",{parentName:"li"},"api")," imports.")))),(0,i.kt)("p",null,"The difference between API and implementation will act as a form of access\ncontrol. API files must compile independently of implementation, only importing\nfrom APIs from other libraries. API files are also visible to all files and\nlibraries for import. Implementation files only see API files for import, not\nother implementation files."),(0,i.kt)("p",null,"When any file imports a library's API, it should be expected that the transitive\nclosure of imported files from the primary API file will be a compilation\ndependency. The size of that transitive closure affects compilation time, so\nlibraries with complex implementations should endeavor to minimize their API\nimports."),(0,i.kt)("p",null,"Libraries also serve as a critical unit of compilation. Dependencies between\nlibraries must be clearly marked, and the resulting dependency graph will allow\nfor separate compilation."),(0,i.kt)("h4",{id:"exporting-entities-from-an-api-file"},"Exporting entities from an API file"),(0,i.kt)("p",null,"Entities in the API file are part of the library's public API by default. They\nmay be marked as ",(0,i.kt)("inlineCode",{parentName:"p"},"private")," to indicate they should only be visible to other\nparts of the library."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-carbon"},'package Geometry library "Shapes" api;\n\n// Circle is an API, and will be available to other libraries as\n Geometry.Circle.\nstruct Circle { ... }\n\n// CircleHelper is private, and so will not be available to other libraries.\nprivate fn CircleHelper(circle: Circle) { ... }\n\n// Only entities in namespaces should be marked as an API, not the namespace\n// itself.\nnamespace Operations;\n\n// Operations.GetCircumference is an API, and will be available to\n// other libraries as Geometry.Operations.GetCircumference.\nfn Operations.GetCircumference(circle: Circle) { ... }\n')),(0,i.kt)("p",null,"This means that an API file can contain all implementation code for a library.\nHowever, separate implementation files are still desirable for a few reasons:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"It will be easier for readers to quickly scan an API-only file for API\ndocumentation."),(0,i.kt)("li",{parentName:"ul"},"Reducing the amount of code in an API file can speed up compilation,\nespecially if fewer imports are needed. This can result in transitive\ncompilation performance improvements for files using the library."),(0,i.kt)("li",{parentName:"ul"},"From a code maintenance perspective, having smaller files can make a library\nmore maintainable.")),(0,i.kt)("p",null,"Entities in the ",(0,i.kt)("inlineCode",{parentName:"p"},"impl")," file should never have visibility keywords. If they are\nforward declared in the ",(0,i.kt)("inlineCode",{parentName:"p"},"api")," file, they use the declaration's visibility; if\nthey are only present in the ",(0,i.kt)("inlineCode",{parentName:"p"},"impl")," file, they are implicitly ",(0,i.kt)("inlineCode",{parentName:"p"},"private"),"."),(0,i.kt)("h4",{id:"granularity-of-libraries"},"Granularity of libraries"),(0,i.kt)("p",null,"The compilation graph of Carbon will generally consist of ",(0,i.kt)("inlineCode",{parentName:"p"},"api")," files depending\non each other, and ",(0,i.kt)("inlineCode",{parentName:"p"},"impl")," files depending only on ",(0,i.kt)("inlineCode",{parentName:"p"},"api")," files. Compiling a given\nfile requires compiling the transitive closure of ",(0,i.kt)("inlineCode",{parentName:"p"},"api")," files first.\nParallelization of compilation is then limited by how large that transitive\nclosure is, in terms of total volume of code rather than quantity. This also\naffects build cache invalidation."),(0,i.kt)("p",null,"In order to maximize opportunities to improve compilation performance, we will\nencourage granular libraries. Conceptually, we want libraries to be very small,\npossibly containing only a single class. The choice of only allowing a single\n",(0,i.kt)("inlineCode",{parentName:"p"},"api")," file per library should help encourage developers to write small\nlibraries."),(0,i.kt)("h4",{id:"exporting-namespaces"},"Exporting namespaces"),(0,i.kt)("p",null,"Any entity may be marked with ",(0,i.kt)("inlineCode",{parentName:"p"},"api")," except for namespace and package entities.\nThat is, ",(0,i.kt)("inlineCode",{parentName:"p"},"api namespace Sha256;")," is invalid code. Instead, namespaces are\nimplicitly exported based on the name paths of other entities marked as ",(0,i.kt)("inlineCode",{parentName:"p"},"api"),"."),(0,i.kt)("p",null,"For example, given this code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-carbon"},'package Checksums library "Sha" api;\n\nnamespaces Sha256;\n\nfn Sha256.HexDigest(data: Bytes) -> String { ... }\n')),(0,i.kt)("p",null,"Calling code may look like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-carbon"},'package Caller api;\n\nimport Checksums library "Sha";\n\nfn Process(data: Bytes) {\n  ...\n  var digest: String = Checksums.Sha256.HexDigest(data);\n  ...\n}\n')),(0,i.kt)("p",null,"In this example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"Sha256")," namespace is exported as part of the API\nimplicitly."),(0,i.kt)("h3",{id:"imports-1"},"Imports"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"import")," directives supports reusing code from other files and libraries. The\n",(0,i.kt)("inlineCode",{parentName:"p"},"import")," directive's syntax may be loosely expressed as a regular expression:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-regex"},"import IDENTIFIER (library NAME_PATH)?;\n")),(0,i.kt)("p",null,"An import declares a package entity named after the imported package, and makes\nAPI entities from the imported library available through it. The full name path\nis a concatenation of the names of the package entity, any namespace entities\napplied, and the final entity addressed. Child namespaces or entities may be\n",(0,i.kt)("a",{parentName:"p",href:"/design/aliases"},"aliased")," if desired."),(0,i.kt)("p",null,"For example, given a library:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-carbon"},"package Math api;\nnamespace Trigonometry;\nfn Trigonometry.Sin(...);\n")),(0,i.kt)("p",null,"Calling code would import it and use it like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-carbon"},"package Geometry api;\n\nimport Math;\n\nfn DoSomething() {\n  ...\n  Math.Trigonometry.Sin(...);\n  ...\n}\n")),(0,i.kt)("p",null,"Repeat imports from the same package reuse the same package entity. For example,\nthis produces only one ",(0,i.kt)("inlineCode",{parentName:"p"},"Math")," package entity:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-carbon"},'import Math;\nimport Math library "Trigonometry";\n')),(0,i.kt)("p",null,"NOTE: A library must never import itself. Any ",(0,i.kt)("inlineCode",{parentName:"p"},"impl")," files in a library\nautomatically import the ",(0,i.kt)("inlineCode",{parentName:"p"},"api"),", so a self-import should never be required."),(0,i.kt)("h4",{id:"imports-from-the-current-package"},"Imports from the current package"),(0,i.kt)("p",null,"Entities defined in the current file may be used without mentioning the package\nprefix. However, other symbols from the package must be imported and accessed\nthrough the package namespace just like symbols from any other package."),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-carbon"},'package Geometry api;\n\n// This is required even though it\'s still in the Geometry package.\nimport Geometry library "Shapes";\n\n// Circle must be referenced using the Geometry namespace of the import.\nfn GetArea(c: Geometry.Circle) { ... }\n')),(0,i.kt)("h3",{id:"namespaces"},"Namespaces"),(0,i.kt)("p",null,"Namespaces offer named paths for entities. Namespaces may be nested. Multiple\nlibraries may contribute to the same namespace. In practice, packages may have\nnamespaces such as ",(0,i.kt)("inlineCode",{parentName:"p"},"Testing")," containing entities that benefit from an isolated\nspace but are present in many libraries."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"namespace")," keyword's syntax may loosely be expressed as a regular\nexpression:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-regex"},"namespace NAME_PATH;\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"namespace")," keyword declares a namespace entity. The namespace is applied to\nother entities by including it as a prefix when declaring a name. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-carbon"},"package Time;\n\nnamespace Timezones.Internal;\nstruct Timezones.Internal.RawData { ... }\n\nfn ParseData(data: Timezones.Internal.RawData);\n")),(0,i.kt)("p",null,"A namespace declaration adds the first identifier in the name path as a name in\nthe file's namespace. In the above example, after declaring\n",(0,i.kt)("inlineCode",{parentName:"p"},"namespace Timezones.Internal;"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Timezones")," is available as an identifier and\n",(0,i.kt)("inlineCode",{parentName:"p"},"Internal")," is reached through ",(0,i.kt)("inlineCode",{parentName:"p"},"Timezones"),"."),(0,i.kt)("h4",{id:"re-declaring-imported-namespaces"},"Re-declaring imported namespaces"),(0,i.kt)("p",null,"Namespaces may exist on imported package entities, in addition to being declared\nin the current file. However, even if the namespace already exists in an\nimported library from the current package, the namespace must still be declared\nlocally in order to add symbols to it."),(0,i.kt)("p",null,"For example, if the ",(0,i.kt)("inlineCode",{parentName:"p"},"Geometry//Shapes/ThreeSides")," library provides the\n",(0,i.kt)("inlineCode",{parentName:"p"},"Geometry.Shapes")," namespace, this code is still valid:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-carbon"},'package Geometry library "Shapes/FourSides" api;\n\nimport Geometry library "Shapes/ThreeSides";\n\n// This does not conflict with the existence of `Geometry.Shapes` from\n// `Geometry//Shapes/ThreeSides`, even though the name path is identical.\nnamespace Shapes;\n\n// This requires the above \'namespace Shapes\' declaration. It cannot use\n// `Geometry.Shapes` from `Geometry//Shapes/ThreeSides`.\nstruct Shapes.Square { ... };\n')),(0,i.kt)("h4",{id:"aliasing"},"Aliasing"),(0,i.kt)("p",null,"Carbon's ",(0,i.kt)("a",{parentName:"p",href:"/design/aliases"},"alias keyword")," will support aliasing\nnamespaces. For example, this would be valid code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-carbon"},"namespace Timezones.Internal;\nalias TI = Timezones.internal;\n\nstruct TI.RawData { ... }\nfn ParseData(data: TI.RawData);\n")),(0,i.kt)("h2",{id:"caveats"},"Caveats"),(0,i.kt)("h3",{id:"package-and-library-name-conflicts"},"Package and library name conflicts"),(0,i.kt)("p",null,"Library name conflicts should not occur, because it's expected that a given\npackage is maintained by a single organization. It's the responsibility of that\norganization to maintain unique library names within their package."),(0,i.kt)("p",null,"A package name conflict occurs when two different packages use the same name,\nsuch as two packages named ",(0,i.kt)("inlineCode",{parentName:"p"},"Stats"),". Versus libraries, package name conflicts are\nmore likely because two organizations may independently choose identical names.\nWe will encourage a unique package naming scheme, such as maintaining a name\nserver for open source packages. Conflicts can also be addressed by renaming one\nof the packages, either at the source, or as a local modification."),(0,i.kt)("p",null,"We do need to address the case of package names conflicting with other entity\nnames. It's possible that a preexisting entity will conflict with a new import,\nand that renaming the entity is infeasible to rename due to existing callers.\nAlternately, the entity may be using an idiomatic name that it would contradict\nnaming conventions to rename. In either case, this conflict may exist in a\nsingle file without otherwise affecting users of the API. This will be addressed\nby ",(0,i.kt)("a",{parentName:"p",href:"/design/name_lookup"},"name lookup"),"."),(0,i.kt)("h3",{id:"potential-refactorings"},"Potential refactorings"),(0,i.kt)("p",null,"These are potential refactorings that we consider important to make it easy to\nautomate."),(0,i.kt)("h4",{id:"update-imports"},"Update imports"),(0,i.kt)("p",null,"Imports will frequently need to be updated as part of refactorings."),(0,i.kt)("p",null,"When code is deleted, it should be possible to parse the remaining code, parse\nthe imports, and determine which entities in imports are referred to. Unused\nimports can then be removed."),(0,i.kt)("p",null,"When code is moved, it's similar to deletion in the originating file. For the\ndestination file, the moved code should be parsed to determine which entities it\nreferred to from the originating file's imports, and these will need to be\nincluded in the destination file: either reused if already present, or added."),(0,i.kt)("p",null,"When new code is added, existing imports can be checked to see if they provide\nthe symbol in question. There may also be heuristics which can be implemented to\ncheck build dependencies for where imports should be added from, such as a\ndatabase of possible entities and their libraries. However, adding references\nmay require manually adding imports."),(0,i.kt)("h4",{id:"between-api-and-impl-files"},"Between ",(0,i.kt)("inlineCode",{parentName:"h4"},"api")," and ",(0,i.kt)("inlineCode",{parentName:"h4"},"impl")," files"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Move an implementation of an API from an ",(0,i.kt)("inlineCode",{parentName:"p"},"api")," file to an ",(0,i.kt)("inlineCode",{parentName:"p"},"impl")," file, while\nleaving a declaration behind."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This should be a local change that will not affect any calling code."),(0,i.kt)("li",{parentName:"ul"},"Inlining will be affected because the implementation won't be visible to\ncallers."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#update-imports"},"Update imports"),"."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Split an ",(0,i.kt)("inlineCode",{parentName:"p"},"api")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"impl")," file."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This is a repeated operation of individual API moves, as noted above."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Move an implementation of an API from an ",(0,i.kt)("inlineCode",{parentName:"p"},"impl")," file to an ",(0,i.kt)("inlineCode",{parentName:"p"},"api")," file."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This should be a local change that will not affect any calling code."),(0,i.kt)("li",{parentName:"ul"},"Inlining will be affected because the implementation becomes visible to\ncallers."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#update-imports"},"Update imports"),"."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Combine an ",(0,i.kt)("inlineCode",{parentName:"p"},"api")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"impl")," file."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This is a repeated operation of individual API moves, as noted above."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Remove the ",(0,i.kt)("inlineCode",{parentName:"p"},"api")," label from a declaration."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Search for library-external callers, and fix them first."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add the ",(0,i.kt)("inlineCode",{parentName:"p"},"api")," label to a declaration."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This should be a local change that will not affect any calling code."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Move a non-",(0,i.kt)("inlineCode",{parentName:"p"},"api"),"-labeled declaration from an ",(0,i.kt)("inlineCode",{parentName:"p"},"api")," file to an ",(0,i.kt)("inlineCode",{parentName:"p"},"impl")," file."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The declaration must be moved to the same file as the implementation of\nthe declaration."),(0,i.kt)("li",{parentName:"ul"},"The declaration can only be used by the ",(0,i.kt)("inlineCode",{parentName:"li"},"impl")," file that now contains\nit. Search for other callers within the library, and fix them first."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#update-imports"},"Update imports"),"."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Move a non-",(0,i.kt)("inlineCode",{parentName:"p"},"api"),"-labeled declaration from an ",(0,i.kt)("inlineCode",{parentName:"p"},"impl")," file to an ",(0,i.kt)("inlineCode",{parentName:"p"},"api")," file."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This should be a local change that will not affect any calling code."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#update-imports"},"Update imports"),"."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Move a declaration and implementation from one ",(0,i.kt)("inlineCode",{parentName:"p"},"impl")," file to another."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Search for any callers within the source ",(0,i.kt)("inlineCode",{parentName:"li"},"impl")," file, and either move\nthem too, or fix them first."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#update-imports"},"Update imports"),".")))),(0,i.kt)("h4",{id:"other-refactorings"},"Other refactorings"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Rename a package."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The imports of all calling files must be updated accordingly."),(0,i.kt)("li",{parentName:"ul"},"All call sites must be changed, as the package name changes."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#update-imports"},"Update imports"),"."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Move an ",(0,i.kt)("inlineCode",{parentName:"p"},"api"),"-labeled declaration and implementation between different\npackages."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The imports of all calling files must be updated accordingly."),(0,i.kt)("li",{parentName:"ul"},"All call sites must be changed, as the package name changes."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#update-imports"},"Update imports"),"."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Move an ",(0,i.kt)("inlineCode",{parentName:"p"},"api"),"-labeled declaration and implementation between libraries in\nthe same package."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The imports of all calling files must be updated accordingly."),(0,i.kt)("li",{parentName:"ul"},"As long as the namespaces remain the same, no call sites will need to be\nchanged."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#update-imports"},"Update imports"),"."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Rename a library."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This is equivalent to a repeated operation of moving an ",(0,i.kt)("inlineCode",{parentName:"li"},"api"),"-labeled\ndeclaration and implementation between libraries in the same package."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Move a declaration and implementation from one namespace to another."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Ensure the new namespace is declared for the declaration and\nimplementation."),(0,i.kt)("li",{parentName:"ul"},"Update the namespace used by call sites."),(0,i.kt)("li",{parentName:"ul"},"The imports of all calling files may remain the same."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Rename a namespace."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This is equivalent to a repeated operation of moving a declaration and\nimplementation from one namespace to another."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Rename a file, or move a file between directories."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Build configuration will need to be updated."),(0,i.kt)("li",{parentName:"ul"},"This additionally requires the steps to rename a library, because\nlibrary names must correspond to the renamed paths.")))),(0,i.kt)("h3",{id:"preference-for-few-child-namespaces"},"Preference for few child namespaces"),(0,i.kt)("p",null,"We expect that most code should use a package and library, but avoid specifying\nnamespaces beneath the package. The package name itself should typically be\nsufficient distinction for names."),(0,i.kt)("p",null,"Child namespaces create longer names, which engineers will dislike typing. Based\non experience, we expect to start seeing aliasing even at name lengths around\nsix characters long. With longer names, we should expect more aliasing, which in\nturn will reduce code readability because more types will have local names."),(0,i.kt)("p",null,"We believe it's feasible for even large projects to collapse namespaces down to\na top level, avoiding internal tiers of namespaces."),(0,i.kt)("p",null,"We understand that child namespaces are sometimes helpful, and will robustly\nsupport them for that. However, we will model code organization to encourage\nfewer namespaces."),(0,i.kt)("h3",{id:"redundant-markers"},"Redundant markers"),(0,i.kt)("p",null,"We use a few possibly redundant markers for packages and libraries:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"package")," keyword requires one of ",(0,i.kt)("inlineCode",{parentName:"li"},"api")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"impl"),", rather than\nexcluding either or both."),(0,i.kt)("li",{parentName:"ul"},"The filename repeats the ",(0,i.kt)("inlineCode",{parentName:"li"},"api")," versus ",(0,i.kt)("inlineCode",{parentName:"li"},"impl")," choice."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"import")," keyword requires the full library.")),(0,i.kt)("p",null,"These choices are made to assist human readability and tooling:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Being explicit about imports creates the opportunity to generate build\ndependencies from files, rather than having them maintained separately."),(0,i.kt)("li",{parentName:"ul"},"Being explicit about ",(0,i.kt)("inlineCode",{parentName:"li"},"api")," versus ",(0,i.kt)("inlineCode",{parentName:"li"},"impl")," makes it easier for both humans and\ntooling to determine what to expect."),(0,i.kt)("li",{parentName:"ul"},"Repeating the type in the filename makes it possible to check the type\nwithout reading file content."),(0,i.kt)("li",{parentName:"ul"},"Repeating the type in the file content makes non-file-system-based builds\npossible.")),(0,i.kt)("h2",{id:"open-questions"},"Open questions"),(0,i.kt)("p",null,"These open questions are expected to be revisited by future proposals."),(0,i.kt)("h3",{id:"different-file-extensions"},"Different file extensions"),(0,i.kt)("p",null,"Currently, we're using ",(0,i.kt)("inlineCode",{parentName:"p"},".carbon")," and ",(0,i.kt)("inlineCode",{parentName:"p"},".impl.carbon"),". In the future, we may want\nto change the extension, particularly because Carbon may be renamed."),(0,i.kt)("p",null,"There are several other possible extensions / commands that we've considered in\ncoming to the current extension:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".carbon"),": This is an obvious and unsurprising choice, but also quite long\nfor a file extension."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".6c"),": This sounds a little like 'sexy' when read aloud."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".c6"),": This seems a weird incorrect ordering of the atomic number and has a\nbad, if obscure, Internet slang association."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".cb")," or ",(0,i.kt)("inlineCode",{parentName:"li"},".cbn"),": These collide with several acronyms and may not be\nespecially memorable as referring to Carbon."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".crb"),": This has a bad Internet slang association.")),(0,i.kt)("h3",{id:"imports-from-other-languages"},"Imports from other languages"),(0,i.kt)("p",null,"Currently, we do not support cross-language imports. In the future, we will\nlikely want to support imports from other languages, particularly for C++\ninteroperability."),(0,i.kt)("p",null,"To fit into the proposed ",(0,i.kt)("inlineCode",{parentName:"p"},"import")," syntax, we are provisionally using a special\n",(0,i.kt)("inlineCode",{parentName:"p"},"Cpp")," package to import headers from C++ code, as in:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-carbon"},'import Cpp library "<map>";\nimport Cpp library "myproject/myclass.h";\n\nfn MyCarbonCall(x: Cpp.std.map(Cpp.MyProject.MyClass));\n')),(0,i.kt)("h3",{id:"imports-from-urls"},"Imports from URLs"),(0,i.kt)("p",null,"Currently, we don't support any kind of package management with imports. In the\nfuture, we may want to support tagging imports with a URL that identifies the\nrepository where that package can be found. This can be used to help drive\npackage management tooling and to support providing a non-name identity for a\npackage that is used to enable handling conflicted package names."),(0,i.kt)("p",null,"Although we're not designing this right now, it could fit into the proposed\nsyntax. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-carbon"},'import Carbon library "Utilities"\n    url("https://github.com/carbon-language/carbon-libraries");\n')),(0,i.kt)("h3",{id:"test-file-type"},"Test file type"),(0,i.kt)("p",null,"Similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"api")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"impl"),", we may eventually want a type like ",(0,i.kt)("inlineCode",{parentName:"p"},"test"),". This\nshould be part of a larger testing plan."),(0,i.kt)("h2",{id:"alternatives-considered"},"Alternatives considered"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Packages",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0107.md#name-paths-for-package-names"},"Name paths for package names")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0107.md#referring-to-the-package-as-package"},"Referring to the package as ",(0,i.kt)("inlineCode",{parentName:"a"},"package"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0107.md#remove-the-library-keyword-from-package-and-import"},"Remove the ",(0,i.kt)("inlineCode",{parentName:"a"},"library")," keyword from ",(0,i.kt)("inlineCode",{parentName:"a"},"package")," and ",(0,i.kt)("inlineCode",{parentName:"a"},"import"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0107.md#rename-package-concept"},"Rename package concept")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0107.md#no-association-between-the-file-system-path-and-librarynamespace"},"No association between the file system path and library/namespace")))),(0,i.kt)("li",{parentName:"ul"},"Libraries",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0107.md#allow-exporting-namespaces"},"Allow exporting namespaces")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0107.md#allow-importing-implementation-files-from-within-the-same-library"},"Allow importing implementation files from within the same library")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0107.md#alternative-library-separators-and-shorthand"},"Alternative library separators and shorthand"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0107.md#single-word-libraries"},"Single-word libraries")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0107.md#collapse-api-and-implementation-file-concepts"},"Collapse API and implementation file concepts"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0107.md#automatically-generating-the-api-separation"},"Automatically generating the API separation")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0107.md#collapse-file-and-library-concepts"},"Collapse file and library concepts")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0107.md#collapse-the-library-concept-into-packages"},"Collapse the library concept into packages")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0107.md#collapse-the-package-concept-into-libraries"},"Collapse the package concept into libraries")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0752.md#default-api-to-private"},"Default ",(0,i.kt)("inlineCode",{parentName:"a"},"api")," to private")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0752.md#default-impl-to-public"},"Default ",(0,i.kt)("inlineCode",{parentName:"a"},"impl")," to public")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0107.md#different-file-type-labels"},"Different file type labels")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0107.md#function-like-syntax"},"Function-like syntax")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0107.md#inlining-from-implementation-files"},"Inlining from implementation files")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0107.md#library-private-access-controls"},"Library-private access controls")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0752.md#make-keywords-either-optional-or-required-in-separate-definitions"},"Make keywords either optional or required in separate definitions")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0107.md#managing-api-versus-implementation-in-libraries"},"Managing API versus implementation in libraries")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0107.md#multiple-api-files"},"Multiple API files")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0107.md#name-paths-as-library-names"},"Name paths as library names")))),(0,i.kt)("li",{parentName:"ul"},"Imports",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0107.md#block-imports"},"Block imports")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0107.md#block-imports-of-libraries-of-a-single-package"},"Block imports of libraries of a single package")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0107.md#broader-imports-either-all-names-or-arbitrary-code"},"Broader imports, either all names or arbitrary code")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0107.md#direct-name-imports"},"Direct name imports")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0107.md#optional-package-names"},"Optional package names")))),(0,i.kt)("li",{parentName:"ul"},"Namespaces",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0107.md#file-level-namespaces"},"File-level namespaces")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0107.md#scoped-namespaces"},"Scoped namespaces"))))),(0,i.kt)("h2",{id:"references"},"References"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Proposal\n",(0,i.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/pull/107"},"#107: Code and name organization"))))}c.isMDXComponent=!0}}]);