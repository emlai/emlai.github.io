"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2685],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=i.createContext({}),l=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return i.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),h=a,m=u["".concat(c,".").concat(h)]||u[h]||d[h]||r;return n?i.createElement(m,o(o({ref:t},p),{},{components:n})):i.createElement(m,o({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<r;l++)o[l]=n[l];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1855:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var i=n(7462),a=(n(7294),n(3905));const r={},o="Difficulties improving C++",s={unversionedId:"difficulties_improving_cpp",id:"difficulties_improving_cpp",title:"Difficulties improving C++",description:"\x3c!--",source:"@site/../docs/project/difficulties_improving_cpp.md",sourceDirName:".",slug:"/difficulties_improving_cpp",permalink:"/project/difficulties_improving_cpp",draft:!1,editUrl:"https://github.com/carbon-language/carbon-lang/blob/trunk/docs/project/difficulties_improving_cpp.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Language design style guide",permalink:"/project/design_style_guide"},next:{title:"Evolution and governance",permalink:"/project/evolution"}},c={},l=[],p={toc:l};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"difficulties-improving-c"},"Difficulties improving C++"),(0,a.kt)("p",null,"C++ is the dominant programming language for the performance critical software\nour goals prioritize. The most direct way to deliver a modern and excellent\ndeveloper experience for those use cases and developers would be to improve C++."),(0,a.kt)("p",null,"Improving C++ to deliver the kind of experience developers expect from a\nprogramming language today is difficult in part because ",(0,a.kt)("strong",{parentName:"p"},"C++ has decades of\ntechnical debt")," accumulated in the design of the language. It inherited the\nlegacy of C, including\n",(0,a.kt)("a",{parentName:"p",href:"https://clang.llvm.org/docs/Modules.html#problems-with-the-current-model"},"textual preprocessing and inclusion"),".\nAt the time, this was essential to C++'s success by giving it instant and high\nquality access to a large C ecosystem. However, over time this has resulted in\nsignificant technical debt ranging from\n",(0,a.kt)("a",{parentName:"p",href:"https://shafik.github.io/c++/2021/12/30/usual_arithmetic_confusions.html"},"integer promotion rules"),'\nto complex syntax with\n"',(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Most_vexing_parse"},"the most vexing parse"),'".'),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"C++ has also prioritized backwards compatibility")," including both syntax and\n",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Application_binary_interface"},"ABI"),". This is\nheavily motivated by preserving its access to existing C/C++ ecosystems, and\nforms one of the foundations of common Linux package management approaches. A\nconsequence is that rather than changing or replacing language designs to\nsimplify and improve the language, features have overwhelmingly been added over\ntime. This both creates technical debt due to complicated feature interaction,\nand fails to benefit from on cleanup opportunities in the form of replacing or\nremoving legacy features."),(0,a.kt)("p",null,"Carbon is exploring significant backwards incompatible changes. It doesn't\ninherit the legacy of C or C++ directly, and instead is starting with solid\nfoundations, like a modern generics system, modular code organization, and\nconsistent, simple syntax. Then, it builds a simplified and improved language\naround those foundational components that remains both interoperable with and\nmigratable from C++, while giving up transparent backwards compatibility. This\nis fundamentally ",(0,a.kt)("strong",{parentName:"p"},"a successor language approach"),", rather than an attempt to\nincrementally evolve C++ to achieve these improvements."),(0,a.kt)("p",null,"Another challenge to improving C++ in these ways is the current evolution\nprocess and direction. A key example of this is the committee's struggle to\nconverge on a clear set of high-level and long-term goals and priorities aligned\nwith ",(0,a.kt)("a",{parentName:"p",href:"https://wg21.link/p2137"},"ours"),". When ",(0,a.kt)("a",{parentName:"p",href:"https://wg21.link/p1863"},"pushed")," to\naddress\n",(0,a.kt)("a",{parentName:"p",href:"https://wg21.link/p2028"},"the technical debt caused by not breaking the ABI"),",\n",(0,a.kt)("strong",{parentName:"p"},"C++'s process\n",(0,a.kt)("a",{parentName:"strong",href:"https://cor3ntin.github.io/posts/abi/#abi-discussions-in-prague"},"did not reach any definitive conclusion")),".\nThis both failed to meaningfully change C++'s direction and priorities towards\nimprovements rather than backwards compatibility, and demonstrates how the\nprocess can fail to make directional decisions."),(0,a.kt)("p",null,"Beyond C++'s evolution direction, the mechanics of the process also make\nimproving C++ difficult. ",(0,a.kt)("strong",{parentName:"p"},"C++'s process is oriented around standardization\nrather than design"),": it uses a multiyear waterfall committee process. Access to\nthe committee and standard is restricted and expensive, attendance is necessary\nto have a voice, and decisions are made by live votes of those present. The\ncommittee structure is designed to ensure representation of nations and\ncompanies, rather than building an inclusive and welcoming team and community of\nexperts and people actively contributing to the language."),(0,a.kt)("p",null,"Carbon has a more accessible and efficient ",(0,a.kt)("a",{parentName:"p",href:"/project/evolution"},"evolution process"),"\nbuilt on open-source principles, processes, and tools. Throughout the project,\nwe explicitly and clearly lay out our ",(0,a.kt)("a",{parentName:"p",href:"/project/goals"},"goals and priorities")," and how\nthose directly shape our decisions. We also have a clear\n",(0,a.kt)("a",{parentName:"p",href:"/project/evolution#governance-structure"},"governance structure")," that can make\ndecisions rapidly when needed. The open-source model enables the Carbon project\nto expand its scope beyond just the language. We will build a holistic\ncollection of tools that provide a rich developer experience, ranging from the\ncompiler and standard library to IDE tools and more. ",(0,a.kt)("strong",{parentName:"p"},"We will even try to close\na huge gap in the C++ ecosystem with a built-in package manager.")),(0,a.kt)("p",null,"Carbon is particularly focused on a specific set of ",(0,a.kt)("a",{parentName:"p",href:"/project/goals"},"goals"),". These\nwill not align with every user of C++, but have significant interest across a\nwide range of users that are capable and motivated to evolve and modernize their\ncodebase. Given the difficulties posed by C++'s technical debt, sustained\npriority of backwards compatibility, and evolution process, we wanted to explore\nan alternative approach to achieve these goals -- through a\nbackwards-incompatible successor language, designed with robust support for\ninteroperability with and migration from C++. We hope other efforts to\nincrementally improve C++ continue, and would love to share ideas where we can."))}d.isMDXComponent=!0}}]);