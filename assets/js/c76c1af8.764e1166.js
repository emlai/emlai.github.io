"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9449],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(a),m=r,b=d["".concat(s,".").concat(m)]||d[m]||u[m]||l;return a?n.createElement(b,o(o({ref:t},c),{},{components:a})):n.createElement(b,o({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5730:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const l={},o="Variables",i={unversionedId:"docs/design/variables",id:"docs/design/variables",title:"Variables",description:"\x3c!--",source:"@site/../docs/design/variables.md",sourceDirName:"docs/design",slug:"/docs/design/variables",permalink:"/docs/design/variables",draft:!1,editUrl:"https://github.com/carbon-language/carbon-lang/blob/trunk/docs/../docs/design/variables.md",tags:[],version:"current",frontMatter:{},sidebar:"design",previous:{title:"Type inference",permalink:"/docs/design/type_inference"}},s={},p=[{value:"Table of contents",id:"table-of-contents",level:2},{value:"Overview",id:"overview",level:2},{value:"Notes",id:"notes",level:2},{value:"Global variables",id:"global-variables",level:3},{value:"Alternatives considered",id:"alternatives-considered",level:2},{value:"References",id:"references",level:2}],c={toc:p};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"variables"},"Variables"),(0,r.kt)("h2",{id:"table-of-contents"},"Table of contents"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#overview"},"Overview")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#notes"},"Notes"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#global-variables"},"Global variables")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#alternatives-considered"},"Alternatives considered")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#references"},"References"))),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"Carbon's local variable syntax is:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"var")," ",(0,r.kt)("em",{parentName:"li"},"identifier"),(0,r.kt)("inlineCode",{parentName:"li"},":")," ",(0,r.kt)("em",{parentName:"li"},"< expression |")," ",(0,r.kt)("inlineCode",{parentName:"li"},"auto")," ",(0,r.kt)("em",{parentName:"li"},"> [")," ",(0,r.kt)("inlineCode",{parentName:"li"},"=")," ",(0,r.kt)("em",{parentName:"li"},"value ]"),(0,r.kt)("inlineCode",{parentName:"li"},";"))),(0,r.kt)("p",null,"Blocks introduce nested scopes and can contain local variable declarations that\nwork similarly to function parameters."),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"fn Foo() {\n  var x: i32 = 42;\n}\n")),(0,r.kt)("p",null,"This introduces a local variable named ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," into the block's scope. It has the\ntype ",(0,r.kt)("inlineCode",{parentName:"p"},"Int")," and is initialized with the value ",(0,r.kt)("inlineCode",{parentName:"p"},"42"),". These variable declarations\n(and function declarations) have a lot more power than what we're covering just\nyet, but this gives you the basic idea."),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"auto")," is used in place of the type, ",(0,r.kt)("a",{parentName:"p",href:"/docs/design/type_inference"},"type inference")," is\nused to automatically determine the variable's type."),(0,r.kt)("p",null,"While there can be global constants, there are no global variables."),(0,r.kt)("h2",{id:"notes"},"Notes"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"TODO: Constant syntax is an ongoing discussion.")),(0,r.kt)("h3",{id:"global-variables"},"Global variables"),(0,r.kt)("p",null,"We are exploring several different ideas for how to design less bug-prone\npatterns to replace the important use cases programmers still have for global\nvariables. We may be unable to fully address them, at least for migrated code,\nand be forced to add some limited form of global variables back. We may also\ndiscover that their convenience outweighs any improvements afforded."),(0,r.kt)("h2",{id:"alternatives-considered"},"Alternatives considered"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0339.md#no-var-introducer-keyword"},"No ",(0,r.kt)("inlineCode",{parentName:"a"},"var")," introducer keyword")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0339.md#name-of-the-var-statement-introducer"},"Name of the ",(0,r.kt)("inlineCode",{parentName:"a"},"var")," statement introducer")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0339.md#colon-between-type-and-identifier"},"Colon between type and identifier")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0339.md#type-elision"},"Type elision")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0618.md#type-ordering"},"Type ordering")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0851.md#elide-the-type-instead-of-using-auto"},"Elide the type instead of using ",(0,r.kt)("inlineCode",{parentName:"a"},"auto")))),(0,r.kt)("h2",{id:"references"},"References"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Proposal\n",(0,r.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/pull/339"},"#339: ",(0,r.kt)("inlineCode",{parentName:"a"},"var")," statement")),(0,r.kt)("li",{parentName:"ul"},"Proposal\n",(0,r.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/pull/618"},"#618: ",(0,r.kt)("inlineCode",{parentName:"a"},"var")," ordering")),(0,r.kt)("li",{parentName:"ul"},"Proposal\n",(0,r.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/pull/851"},"#851: auto keyword for vars"))))}u.isMDXComponent=!0}}]);