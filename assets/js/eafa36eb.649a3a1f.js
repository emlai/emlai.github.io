"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8591],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),f=a,m=u["".concat(s,".").concat(f)]||u[f]||p[f]||i;return n?r.createElement(m,o(o({ref:t},d),{},{components:n})):r.createElement(m,o({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},705:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={},o="Aliases",l={unversionedId:"docs/design/aliases",id:"docs/design/aliases",title:"Aliases",description:"\x3c!--",source:"@site/../docs/design/aliases.md",sourceDirName:"docs/design",slug:"/docs/design/aliases",permalink:"/docs/design/aliases",draft:!1,editUrl:"https://github.com/carbon-language/carbon-lang/blob/trunk/docs/../docs/design/aliases.md",tags:[],version:"current",frontMatter:{},sidebar:"design",previous:{title:"Language design",permalink:"/docs/design/"},next:{title:"Blocks and statements",permalink:"/docs/design/blocks_and_statements"}},s={},c=[{value:"TODO",id:"todo",level:2},{value:"Overview",id:"overview",level:2},{value:"Alternatives",id:"alternatives",level:3}],d={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"aliases"},"Aliases"),(0,a.kt)("h2",{id:"todo"},"TODO"),(0,a.kt)("p",null,"This is a skeletal design, added to support ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/"},"the overview"),". It should\nnot be treated as accepted by the core team; rather, it is a placeholder until\nwe have more time to examine this detail. Please feel welcome to rewrite and\nupdate as appropriate."),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"Naming is one of the things that most often requires careful management over\ntime -- things tend to get renamed and moved around."),(0,a.kt)("p",null,"Carbon provides a fully general name aliasing facility to declare a new name as\nan alias for a value; everything is a value in Carbon. This is a fully general\nfacility because everything is a value in Carbon, including types."),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"alias MyInt = Int;\n")),(0,a.kt)("p",null,"This creates an alias called ",(0,a.kt)("inlineCode",{parentName:"p"},"MyInt")," for whatever ",(0,a.kt)("inlineCode",{parentName:"p"},"Int")," resolves to. Code\ntextually after this can refer to ",(0,a.kt)("inlineCode",{parentName:"p"},"MyInt"),", and it will transparently refer to\n",(0,a.kt)("inlineCode",{parentName:"p"},"Int"),"."),(0,a.kt)("h3",{id:"alternatives"},"Alternatives"),(0,a.kt)("p",null,"The syntax here is not at all in a good state yet. We've considered a few\nalternatives, but they all end up being confusing in some way. We need to figure\nout a good and clean syntax that can be used here."))}p.isMDXComponent=!0}}]);