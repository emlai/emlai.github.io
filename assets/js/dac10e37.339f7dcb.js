"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[387],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),f=p(n),d=a,m=f["".concat(s,".").concat(d)]||f[d]||u[d]||i;return n?r.createElement(m,l(l({ref:t},c),{},{components:n})):r.createElement(m,l({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=f;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},3551:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={},l="Type inference",o={unversionedId:"type_inference",id:"type_inference",title:"Type inference",description:"\x3c!--",source:"@site/../docs/design/type_inference.md",sourceDirName:".",slug:"/type_inference",permalink:"/design/type_inference",draft:!1,editUrl:"https://github.com/carbon-language/carbon-lang/blob/trunk/docs/design/type_inference.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Tuples",permalink:"/design/tuples"},next:{title:"Variables",permalink:"/design/variables"}},s={},p=[{value:"Table of contents",id:"table-of-contents",level:2},{value:"Overview",id:"overview",level:2},{value:"Open questions",id:"open-questions",level:2},{value:"Inferring a variable type from literals",id:"inferring-a-variable-type-from-literals",level:3},{value:"Alternatives considered",id:"alternatives-considered",level:2},{value:"References",id:"references",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"type-inference"},"Type inference"),(0,a.kt)("h2",{id:"table-of-contents"},"Table of contents"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#overview"},"Overview")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#open-questions"},"Open questions"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#inferring-a-variable-type-from-literals"},"Inferring a variable type from literals")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#alternatives-considered"},"Alternatives considered")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#references"},"References"))),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Type_inference"},"Type inference")," occurs in Carbon\nwhen the ",(0,a.kt)("inlineCode",{parentName:"p"},"auto")," keyword is used. This may occur in\n",(0,a.kt)("a",{parentName:"p",href:"/design/variables"},"variable declarations")," or ",(0,a.kt)("a",{parentName:"p",href:"/design/functions"},"function declarations"),"."),(0,a.kt)("p",null,"At present, type inference is very simple: given the expression which generates\nthe value to be used for type inference, the inferred type is the precise type\nof that expression. For example, the inferred type for ",(0,a.kt)("inlineCode",{parentName:"p"},"auto")," in\n",(0,a.kt)("inlineCode",{parentName:"p"},"fn Foo(x: i64) -> auto { return x; }")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"i64"),"."),(0,a.kt)("p",null,"Type inference is currently supported for ",(0,a.kt)("a",{parentName:"p",href:"/design/functions"},"function return types"),"\nand ",(0,a.kt)("a",{parentName:"p",href:"/design/variables"},"declared variable types"),"."),(0,a.kt)("h2",{id:"open-questions"},"Open questions"),(0,a.kt)("h3",{id:"inferring-a-variable-type-from-literals"},"Inferring a variable type from literals"),(0,a.kt)("p",null,"Using the type on the right side for ",(0,a.kt)("inlineCode",{parentName:"p"},"var y: auto = 1")," currently results in a\nconstant ",(0,a.kt)("inlineCode",{parentName:"p"},"IntLiteral(1)")," value, whereas most languages would suggest a variable\ninteger type, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"i64"),". Carbon might also make it an error. Although type\ninference currently only addresses ",(0,a.kt)("inlineCode",{parentName:"p"},"auto")," for variables and function return\ntypes, this is something that will be considered as part of type inference in\ngeneral, because it also affects generics, templates, lambdas, and return types."),(0,a.kt)("h2",{id:"alternatives-considered"},"Alternatives considered"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0851.md#use-_-instead-of-auto"},"Use ",(0,a.kt)("inlineCode",{parentName:"a"},"_")," instead of ",(0,a.kt)("inlineCode",{parentName:"a"},"auto")))),(0,a.kt)("h2",{id:"references"},"References"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Proposal\n",(0,a.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/pull/851"},"#851: auto keyword for vars"))))}u.isMDXComponent=!0}}]);