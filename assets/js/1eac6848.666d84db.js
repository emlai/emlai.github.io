"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7216],{3905:(e,n,r)=>{r.d(n,{Zo:()=>p,kt:()=>m});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function c(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function o(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=t.createContext({}),s=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):c(c({},n),e)),r},p=function(e){var n=s(e.components);return t.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=s(r),m=a,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return r?t.createElement(f,c(c({ref:n},p),{},{components:r})):t.createElement(f,c({ref:n},p))}));function m(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,c=new Array(i);c[0]=d;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,c[1]=o;for(var s=2;s<i;s++)c[s]=r[s];return t.createElement.apply(null,c)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6488:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var t=r(7462),a=(r(7294),r(3905));const i={},c="Front page snippets for Carbon",o={unversionedId:"docs/images/snippets",id:"docs/images/snippets",title:"Front page snippets for Carbon",description:"\x3c!--",source:"@site/../docs/images/snippets.md",sourceDirName:"docs/images",slug:"/docs/images/snippets",permalink:"/docs/images/snippets",draft:!1,editUrl:"https://github.com/carbon-language/carbon-lang/blob/trunk/docs/../docs/images/snippets.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Glossary",permalink:"/docs/guides/glossary"},next:{title:"Project",permalink:"/docs/project/"}},l={},s=[{value:"Images",id:"images",level:2},{value:"Quicksort",id:"quicksort",level:2},{value:"Carbon and C++",id:"carbon-and-c",level:2},{value:"C++",id:"c",level:3},{value:"Carbon",id:"carbon",level:3},{value:"Mixed",id:"mixed",level:3}],p={toc:s};function u(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"front-page-snippets-for-carbon"},"Front page snippets for Carbon"),(0,a.kt)("h2",{id:"images"},"Images"),(0,a.kt)("p",null,"Images are managed in\n",(0,a.kt)("a",{parentName:"p",href:"https://drive.google.com/drive/folders/1-rsUjiya7dSZ87L8kpZmu3MZghRVxzLA"},"Google Drive"),"."),(0,a.kt)("h2",{id:"quicksort"},"Quicksort"),(0,a.kt)("p",null,"A sample of quicksort in Carbon."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"package Sorting api;\n\nfn Partition[T:! Comparable & Movable](s: Slice(T))\n     -> i64 {\n  var i: i64 = -1;\n\n  for (e: T in s) {\n    if (e <= s.Last()) {\n      ++i;\n      Swap(&s[i], &e);\n    }\n  }\n  return i;\n}\n\nfn QuickSort[T:! Comparable & Movable](s: Slice(T)) {\n  if (s.Size() <= 1) {\n    return;\n  }\n  let p: i64 = Partition(s);\n  QuickSort(s[:p - 1]);\n  QuickSort(s[p + 1:]);\n}\n")),(0,a.kt)("h2",{id:"carbon-and-c"},"Carbon and C++"),(0,a.kt)("h3",{id:"c"},"C++"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'// C++:\n#include <math.h>\n#include <iostream>\n#include <span>\n#include <vector>\n\nstruct Circle {\n  float r;\n};\n\nvoid PrintTotalArea(std::span<Circle> circles) {\n  float area = 0;\n  for (const Circle& c : circles) {\n    area += M_PI * c.r * c.r;\n  }\n  std::cout << "Total area: " << area << "\\n";\n}\n\nauto main(int argc, char** argv) -> int {\n  std::vector<Circle> circles = {{1.0}, {2.0}};\n  // Implicitly constructors `span` from `vector`.\n  PrintTotalArea(circles);\n  return 0;\n}\n')),(0,a.kt)("h3",{id:"carbon"},"Carbon"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'// Carbon:\npackage Geometry api;\nimport Math;\n\nclass Circle {\n  var r: f32;\n}\n\nfn PrintTotalArea(circles: Slice(Circle)) {\n  var area: f32 = 0;\n  for (c: Circle in circles) {\n    area += Math.Pi * c.r * c.r;\n  }\n  Print("Total area: {0}", area);\n}\n\nfn Main() -> i32 {\n  // A dynamically sized array, like `std::vector`.\n  var circles: Array(Circle) = ({.r = 1.0}, {.r = 2.0});\n  // Implicitly constructs `Slice` from `Array`.\n  PrintTotalArea(circles);\n  return 0;\n}\n')),(0,a.kt)("h3",{id:"mixed"},"Mixed"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'// C++ code used in both Carbon and C++:\nstruct Circle {\n  float r;\n};\n\n// Carbon exposing a function for C++:\npackage Geometry api;\nimport Cpp library "circle.h";\nimport Math;\n\nfn PrintTotalArea(circles: Slice(Cpp.Circle)) {\n  var area: f32 = 0;\n  for (c: Cpp.Circle in circles) {\n    area += Math.Pi * c.r * c.r;\n  }\n  Print("Total area: {0}", area);\n}\n\n// C++ calling Carbon:\n#include <vector>\n#include "circle.h"\n#include "geometry.carbon.h"\n\nauto main(int argc, char** argv) -> int {\n  std::vector<Circle> circles = {{1.0}, {2.0}};\n  // Carbon\'s `Slice` supports implicit construction from `std::vector`,\n  // similar to `std::span`.\n  Geometry::PrintTotalArea(circles);\n  return 0;\n}\n')))}u.isMDXComponent=!0}}]);