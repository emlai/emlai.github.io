"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7091],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var r=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,i=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=s(t),d=l,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||i;return t?r.createElement(f,a(a({ref:n},p),{},{components:t})):r.createElement(f,a({ref:n},p))}));function d(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=t.length,a=new Array(i);a[0]=m;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:l,a[1]=o;for(var s=2;s<i;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},640:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var r=t(7462),l=(t(7294),t(3905));const i={},a="Lexical conventions",o={unversionedId:"docs/design/lexical_conventions/README",id:"docs/design/lexical_conventions/README",title:"Lexical conventions",description:"\x3c!--",source:"@site/../docs/design/lexical_conventions/README.md",sourceDirName:"docs/design/lexical_conventions",slug:"/docs/design/lexical_conventions/",permalink:"/docs/design/lexical_conventions/",draft:!1,editUrl:"https://github.com/carbon-language/carbon-lang/blob/trunk/docs/../docs/design/lexical_conventions/README.md",tags:[],version:"current",frontMatter:{},sidebar:"design",previous:{title:"Interoperability philosophy and goals",permalink:"/docs/design/interoperability/philosophy_and_goals"},next:{title:"Numeric literals",permalink:"/docs/design/lexical_conventions/numeric_literals"}},c={},s=[{value:"Table of contents",id:"table-of-contents",level:2},{value:"Lexical elements",id:"lexical-elements",level:2}],p={toc:s};function u(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"lexical-conventions"},"Lexical conventions"),(0,l.kt)("h2",{id:"table-of-contents"},"Table of contents"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#lexical-elements"},"Lexical elements"))),(0,l.kt)("h2",{id:"lexical-elements"},"Lexical elements"),(0,l.kt)("p",null,"The first stage of processing a\n",(0,l.kt)("a",{parentName:"p",href:"/docs/design/code_and_name_organization/source_files"},"source file")," is the\ndivision of the source file into lexical elements."),(0,l.kt)("p",null,"A ",(0,l.kt)("em",{parentName:"p"},"lexical element")," is one of the following:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"a maximal sequence of ",(0,l.kt)("a",{parentName:"li",href:"/docs/design/lexical_conventions/whitespace"},"whitespace")," characters"),(0,l.kt)("li",{parentName:"ul"},"a ",(0,l.kt)("a",{parentName:"li",href:"/docs/design/lexical_conventions/words"},"word")),(0,l.kt)("li",{parentName:"ul"},"a literal:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"a ",(0,l.kt)("a",{parentName:"li",href:"/docs/design/lexical_conventions/numeric_literals"},"numeric literal")),(0,l.kt)("li",{parentName:"ul"},"a ",(0,l.kt)("a",{parentName:"li",href:"/docs/design/lexical_conventions/string_literals"},"string literal")))),(0,l.kt)("li",{parentName:"ul"},"TODO: operators, comments, ...")),(0,l.kt)("p",null,"The sequence of lexical elements is formed by repeatedly removing the longest\ninitial sequence of characters that forms a valid lexical element."))}u.isMDXComponent=!0}}]);