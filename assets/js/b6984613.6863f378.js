"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2330],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>k});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=s(t),k=r,d=u["".concat(p,".").concat(k)]||u[k]||c[k]||l;return t?a.createElement(d,i(i({ref:n},m),{},{components:t})):a.createElement(d,i({ref:n},m))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=u;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8513:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=t(7462),r=(t(7294),t(3905));const l={},i="Loops",o={unversionedId:"control_flow/loops",id:"control_flow/loops",title:"Loops",description:"\x3c!--",source:"@site/../docs/design/control_flow/loops.md",sourceDirName:"control_flow",slug:"/control_flow/loops",permalink:"/design/control_flow/loops",draft:!1,editUrl:"https://github.com/carbon-language/carbon-lang/blob/trunk/docs/design/control_flow/loops.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Control flow",permalink:"/design/control_flow/conditionals"},next:{title:"return",permalink:"/design/control_flow/return"}},p={},s=[{value:"Table of contents",id:"table-of-contents",level:2},{value:"Overview",id:"overview",level:2},{value:"Details",id:"details",level:2},{value:"<code>while</code>",id:"while",level:3},{value:"<code>for</code>",id:"for",level:3},{value:"<code>break</code>",id:"break",level:3},{value:"<code>continue</code>",id:"continue",level:3},{value:"Alternatives considered",id:"alternatives-considered",level:2},{value:"References",id:"references",level:2}],m={toc:s};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"loops"},"Loops"),(0,r.kt)("h2",{id:"table-of-contents"},"Table of contents"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#overview"},"Overview")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#details"},"Details"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#while"},(0,r.kt)("inlineCode",{parentName:"a"},"while"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#for"},(0,r.kt)("inlineCode",{parentName:"a"},"for"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#break"},(0,r.kt)("inlineCode",{parentName:"a"},"break"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#continue"},(0,r.kt)("inlineCode",{parentName:"a"},"continue"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#alternatives-considered"},"Alternatives considered")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#references"},"References"))),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"Carbon provides loops using the ",(0,r.kt)("inlineCode",{parentName:"p"},"while")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"for")," statements. Within a loop, the\n",(0,r.kt)("inlineCode",{parentName:"p"},"break")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"continue")," statements can be used for flow control."),(0,r.kt)("h2",{id:"details"},"Details"),(0,r.kt)("h3",{id:"while"},(0,r.kt)("inlineCode",{parentName:"h3"},"while")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"while")," statements loop for as long as the passed expression returns ",(0,r.kt)("inlineCode",{parentName:"p"},"True"),".\nSyntax is:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"while (")," ",(0,r.kt)("em",{parentName:"p"},"boolean expression")," ",(0,r.kt)("inlineCode",{parentName:"p"},") {")," ",(0,r.kt)("em",{parentName:"p"},"statements")," ",(0,r.kt)("inlineCode",{parentName:"p"},"}"))),(0,r.kt)("p",null,"For example, this prints ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"2"),", then ",(0,r.kt)("inlineCode",{parentName:"p"},"Done!"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-carbon"},'var x: Int = 0;\nwhile (x < 3) {\n  Print(x);\n  ++x;\n}\nPrint("Done!");\n')),(0,r.kt)("h3",{id:"for"},(0,r.kt)("inlineCode",{parentName:"h3"},"for")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"for")," statements support range-based looping, typically over containers. Syntax\nis:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"for (")," ",(0,r.kt)("em",{parentName:"p"},"var declaration")," ",(0,r.kt)("inlineCode",{parentName:"p"},"in")," ",(0,r.kt)("em",{parentName:"p"},"expression")," ",(0,r.kt)("inlineCode",{parentName:"p"},") {")," ",(0,r.kt)("em",{parentName:"p"},"statements")," ",(0,r.kt)("inlineCode",{parentName:"p"},"}"))),(0,r.kt)("p",null,"For example, this prints all names in ",(0,r.kt)("inlineCode",{parentName:"p"},"names"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-carbon"},"for (var name: String in names) {\n  Print(name);\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"PrintNames()")," prints each ",(0,r.kt)("inlineCode",{parentName:"p"},"String")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"names")," ",(0,r.kt)("inlineCode",{parentName:"p"},"List")," in iteration order."),(0,r.kt)("h3",{id:"break"},(0,r.kt)("inlineCode",{parentName:"h3"},"break")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"break")," statement immediately ends a ",(0,r.kt)("inlineCode",{parentName:"p"},"while")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"for")," loop. Execution will\nresume at the end of the loop's scope. Syntax is:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"break;"))),(0,r.kt)("p",null,"For example, this processes steps until a manual step is hit (if no manual step\nis hit, all steps are processed):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-carbon"},'for (var step: Step in steps) {\n  if (step.IsManual()) {\n    Print("Reached manual step!");\n    break;\n  }\n  step.Process();\n}\n')),(0,r.kt)("h3",{id:"continue"},(0,r.kt)("inlineCode",{parentName:"h3"},"continue")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"continue")," statement immediately goes to the next loop of a ",(0,r.kt)("inlineCode",{parentName:"p"},"while")," or\n",(0,r.kt)("inlineCode",{parentName:"p"},"for"),". In a ",(0,r.kt)("inlineCode",{parentName:"p"},"while"),", execution continues with the ",(0,r.kt)("inlineCode",{parentName:"p"},"while")," expression. Syntax is:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"continue;"))),(0,r.kt)("p",null,"For example, this prints all non-empty lines of a file, using ",(0,r.kt)("inlineCode",{parentName:"p"},"continue")," to skip\nempty lines:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-carbon"},"var f: File = OpenFile(path);\nwhile (!f.EOF()) {\n  var line: String = f.ReadLine();\n  if (line.IsEmpty()) {\n    continue;\n  }\n  Print(line);\n}\n")),(0,r.kt)("h2",{id:"alternatives-considered"},"Alternatives considered"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0340.md#non-c-syntax"},"Non-C++ syntax")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0340.md#initializing-variables-in-the-while"},"Initializing variables in the ",(0,r.kt)("inlineCode",{parentName:"a"},"while"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"for"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0353.md#include-semisemi-for-loops"},"Include semisemi ",(0,r.kt)("inlineCode",{parentName:"a"},"for")," loops")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0353.md#multi-variable-bindings"},"Multi-variable bindings")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0618.md#-versus-in"},(0,r.kt)("inlineCode",{parentName:"a"},":")," versus ",(0,r.kt)("inlineCode",{parentName:"a"},"in"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0623.md#optional-braces"},"Optional braces")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0623.md#optional-parentheses"},"Optional parentheses"))),(0,r.kt)("h2",{id:"references"},"References"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Proposal\n",(0,r.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/pull/340"},"#340: ",(0,r.kt)("inlineCode",{parentName:"a"},"while"))),(0,r.kt)("li",{parentName:"ul"},"Proposal\n",(0,r.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/pull/353"},"#353: ",(0,r.kt)("inlineCode",{parentName:"a"},"for"))),(0,r.kt)("li",{parentName:"ul"},"Proposal\n",(0,r.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/pull/618"},"#618: ",(0,r.kt)("inlineCode",{parentName:"a"},"var")," ordering")),(0,r.kt)("li",{parentName:"ul"},"Proposal\n",(0,r.kt)("a",{parentName:"li",href:"https://github.com/carbon-language/carbon-lang/pull/623"},"#623: Require braces"))))}c.isMDXComponent=!0}}]);