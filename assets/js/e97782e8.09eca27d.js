"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1946],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>d});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(a),d=r,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return a?n.createElement(f,o(o({ref:t},p),{},{components:a})):n.createElement(f,o({ref:t},p))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},9597:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const i={},o="Carbon language specification",l={unversionedId:"docs/spec/lang/README",id:"docs/spec/lang/README",title:"Carbon language specification",description:"\x3c!--",source:"@site/../docs/spec/lang/README.md",sourceDirName:"docs/spec/lang",slug:"/docs/spec/lang/",permalink:"/docs/spec/lang/",draft:!1,editUrl:"https://github.com/carbon-language/carbon-lang/blob/trunk/docs/../docs/spec/lang/README.md",tags:[],version:"current",frontMatter:{},sidebar:"spec",previous:{title:"Spec",permalink:"/docs/spec/"},next:{title:"Execution",permalink:"/docs/spec/lang/execution"}},s={},c=[{value:"Program structure",id:"program-structure",level:2},{value:"Conformance",id:"conformance",level:2},{value:"Translation",id:"translation",level:2},{value:"Linkage",id:"linkage",level:2}],p={toc:c};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"carbon-language-specification"},"Carbon language specification"),(0,r.kt)("h2",{id:"program-structure"},"Program structure"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"A ",(0,r.kt)("em",{parentName:"p"},"program")," is a collection of one or more linkage units that are\n",(0,r.kt)("a",{parentName:"p",href:"#linkage"},"linked")," together.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"A ",(0,r.kt)("em",{parentName:"p"},"Carbon linkage unit")," is the result of ",(0,r.kt)("a",{parentName:"p",href:"#translation"},"translating")," a\nsource file. A ",(0,r.kt)("em",{parentName:"p"},"foreign linkage unit")," is an artifact produced by a\ntranslation process for some other programming language. A linkage unit is\neither a Carbon linkage unit or a foreign linkage unit.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"A ",(0,r.kt)("em",{parentName:"p"},"source file")," is a sequence of Unicode code points."),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Note: Source files are typically stored on disk in files with a ",(0,r.kt)("inlineCode",{parentName:"p"},".carbon"),"\nfile extension, encoded in UTF-8.")))),(0,r.kt)("h2",{id:"conformance"},"Conformance"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"A program is ",(0,r.kt)("em",{parentName:"p"},"valid"),' if it contains no constructs that violate "shall"\nconstraints in this specification. Otherwise, the program is ',(0,r.kt)("em",{parentName:"p"},"invalid"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"An implementation is ",(0,r.kt)("em",{parentName:"p"},"conforming")," if it accepts all valid programs, it\nrejects all invalid programs for which a diagnostic is required, and the\n",(0,r.kt)("a",{parentName:"p",href:"/docs/spec/lang/execution"},"execution")," semantics of all accepted programs is as specified\nin this specification."))),(0,r.kt)("h2",{id:"translation"},"Translation"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Translation of a source file into a Carbon linkage unit proceeds as follows:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/spec/lang/lex"},"Lexical analysis")," decomposes the sequence of code points into a\nsequence of lexical elements."),(0,r.kt)("li",{parentName:"ul"},"Whitespace and text comments are discarded, leaving a sequence of\n",(0,r.kt)("a",{parentName:"li",href:"/docs/spec/lang/lex"},"tokens"),"."),(0,r.kt)("li",{parentName:"ul"},"The tokens are ",(0,r.kt)("a",{parentName:"li",href:"/docs/spec/lang/parsing"},"parsed")," into an abstract syntax tree."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/spec/lang/names"},"Unqualified names are bound")," to declarations in the abstract\nsyntax tree."),(0,r.kt)("li",{parentName:"ul"},"A translated form of each imported ",(0,r.kt)("a",{parentName:"li",href:"/docs/spec/lang/libs"},"library")," is located and\nloaded."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/spec/lang/semantics"},"Semantic analysis")," is performed: types are determined and\nsemantic checks are performed for all non-template-dependent constructs\nin the abstract syntax tree, constant expressions are evaluated, and\ntemplates are instantiated and semantically analyzed."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Note: After semantic analysis, an implementation may optionally\nmonomorphize generics by a process similar to template instantiation."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The resulting linkage unit comprises all entities in the translated source\nfile that are either ",(0,r.kt)("a",{parentName:"p",href:"#linkage"},"external")," or are reachable from an external\nentity."),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Note: A linkage unit can include non-monomorphized generics, but never\nincludes templates. Constant evaluation can eliminate references to\nentities.")))),(0,r.kt)("h2",{id:"linkage"},"Linkage"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Two declarations declare the same entity if both declarations are in the\nsame library and the same ",(0,r.kt)("a",{parentName:"p",href:"/docs/spec/lang/names#scopes"},"scope")," and declare the same\n",(0,r.kt)("a",{parentName:"p",href:"/docs/spec/lang/names"},"name"),"."),(0,r.kt)("p",{parentName:"li"},"TODO: Linkage rules for foreign entities. TODO: Ability to declare\nfile-local entities.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"All declarations of an entity shall use the same type.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Every entity that is reachable from a linkage unit in a program shall be\ndefined by a linkage unit in the program; no diagnostic is required unless\nan entity that can be referenced during the ",(0,r.kt)("a",{parentName:"p",href:"/docs/spec/lang/execution"},"execution")," of the\nprogram is not defined.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"There shall not be more than one definition of an entity in a program."))))}m.isMDXComponent=!0}}]);